<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Glenn Stovall]]></title>
  <link href="http://gsto.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://gsto.github.com/"/>
  <updated>2013-07-07T16:31:47-04:00</updated>
  <id>http://gsto.github.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Terminals for Absolute Beginners: Part 3]]></title>
    <link href="http://gsto.github.com/blog/2012/10/30/terminals-for-absolute-beginners-part-3/"/>
    <updated>2012-10-30T15:03:00-04:00</updated>
    <id>http://gsto.github.com/blog/2012/10/30/terminals-for-absolute-beginners-part-3</id>
    <content type="html"><![CDATA[<h3>File Permissions</h3>

<p><img class="left" src="/images/articles/terminal.jpg" width="260"></p>

<p> In this article, we'll take a look at how file permissions works. We'll cover how users, groups, and file permissions work in a UNIX-based system, and how they can be used to make using the terminal more secure.</p>

<p> <!-- more --></p>

<ul>
<li>Read Part 1 <a href="/blog/2012/02/15/terminals-for-absolute-beginners/">Directories and Commands</a></li>
<li>Read Part 2 <a href="/blog/2012/03/07/terminals-for-absolute-beginners-part-2/">Manipulating Files</a></li>
</ul>


<h4>Users and Groups</h4>

<h4>Understanding Permissions</h4>

<p> Let's begin by taking a second look at an example from lesson 1, the output on the command line when we ran the command <code>ls -la</code>:</p>

<pre><code>drwxr-xr-x 70 grp   glenn    4096 2012-02-15 09:35 .
drwxr-xr-x  3 root  root     4096 2011-03-15 16:55 ..
drwxr-xr-x  2 grp   glenn    4096 2012-02-07 09:21 Pictures
drwxr-xr-x  2 grp   glenn    4096 2011-08-23 15:29 Public
drwxr-xr-x  5 grp   glenn    4096 2011-09-28 13:30 Rails
drwxr-xr-x  6 grp   glenn    4096 2011-11-08 16:35 Repositories
drwxr-xr-x 12 grp   glenn    4096 2012-01-15 17:09 Server
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Templates
drwxrwxr-x  2 grp   glenn    4096 2011-08-11 08:46 Ubuntu One
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Videos
</code></pre>

<p>Now, what is of interest to us here is the first column. this is the list of <em>permissions</em> on a file or directory. if the permission is present, the letter is shown. if it is not, then there is a hyphen. so a directory with all permissions (anyone can do anything to it) would look like this:</p>

<pre><code>drwxrwxrwx
</code></pre>

<p>the first letter is actually not a permission, but a flag telling us what kind of file it is, most commonly <code>d</code> for a directory and <code>-</code> for a regular file. Next you will notice that there is a repeating series of 3 letters: r, w, and x. these are short for <strong>R</strong>ead, <strong>W</strong>rite, and e<strong>X</strong>ecute. The first three letters refer to the permissions of the user that owns the file. The second three letters refer to the permissions of any users in the group that owns the file. The third set of letters repesent the permissions of all other users (these are commonly called <em>world permissions</em> or <em>other permissions</em>). So let's look at a couple of examples and see what they mean:</p>

<p><code>drwxr-xr-x</code> : The owner may read, write or execute this directory; everyone else may only read or execute it.</p>

<p><code>-rw-r-----</code> : The owner may read or write to the file; people in the group have read-only access; no one else can do anything with it, and no one may execute it.</p>

<p><code>-rwxrwxrwx</code> : Anyone can do anything to this file.</p>

<h4>Octal Permissions</h4>

<p>Permissions can also be represented numerically. These are called <em>Octal Permissions</em>, as they are represented in base 8. In octal permissions, a 1 represents permissions to execute, 2 represents permissions to write, and 4 represent permissions to read. Since all sums of these numbers are unique, we can now represent the rights of any user or group with one digit between 0 and 7:</p>

<pre><code>| Number | Permissions |
------------------------
| 0      | ---         |
| 1      | --x         |
| 2      | -w-         |
| 3      | -wx         |
| 4      | r--         |
| 5      | r-x         |
| 6      | rw-         |
| 7      | rwx         |
------------------------
</code></pre>

<p>Now, we can use three digits to represent the permissions of a file. In a similar manner to above, the first number represents the user's rights, the second number the groups, and the third represents the world permissions. Our previous examples can be written as such:</p>

<pre><code>drwxr-xr-x  :   755
-rw-r-----  :   640
-rwxrwxrwx  :   777
</code></pre>

<h4>Manipulating Permissions</h4>

<p>If we want to change the permissions of a file, there are three commands we can use. The first is called <code>chmod</code> and is used for manipulating the file permissions. The arguments for chmod are an octal number to set the new file permissions, and the name of a file. you can also use the <code>-R</code> flag if you want to recursively change all the permissions of files in a directory. Example:</p>

<pre><code>chmod 777 file_name.txt
</code></pre>

<p>The second is <code>chown</code> , which is short for "change owner". It is used to change ownership of a file. It takes arguments in a similar fashion to chmod, but instead of an octal number, it takes a username as an argument. Example:</p>

<pre><code>chown glenn file_name.txt
</code></pre>

<p>The third is <code>chgrp</code>, which is short for "change group". Again, this command works in a similar fashion to chown, except that this command changes the group ownership of a file instead of the user. Example:</p>

<pre><code>chgrp psacln file_name.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminals for Absolute Beginners: Part 2]]></title>
    <link href="http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2/"/>
    <updated>2012-03-07T08:14:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2</id>
    <content type="html"><![CDATA[<h3>Manipulating Files</h3>

<p><img class="left" src="/images/articles/terminal.jpg" width="260"></p>

<ul>
<li>Read Part 1 <a href="blog/2012/02/15/terminals-for-absolute-beginners/">Here</a></li>
</ul>


<p>Now that we have learned the basics of navigating the terminal, lets start looking at how to we affect the file system we're working in. In this tutorial, we'll cover the following: creating and deleting directories, copying and moving files and directories, and creating and deleting files.</p>

<p> <!-- more --></p>

<p> ###Creating and Deleting Directories</p>

<p> Wherever you left off in the last lesson, let's start by going back to home directory, and working from there. Remember that we can do this by running the command <code>cd ~</code>. Now, since we will be manipulating the file system in this tutortial, let's create a new directory that we can work in. You can do this by using the <code>mkdir</code> command. mkdir is short for "make directory". just type mkdir and the name of the folder you would like to create. For this example, we'll call it 'terminal-tutorial'</p>

<pre><code>mkdir terminal-tutorial
ls
</code></pre>

<p>When you run <code>ls</code>, you'll see that a new directory has been created. <code>mkdir</code> defaults to creating the directory inside the directory you are currently located. if you define a path, it will created the directory there. For example, lets make a directory inside of our terminal-tutorial directory, and then navigate there.</p>

<pre><code>mkdir terminal-tutorial/to-delete
cd terminal-tutorial
ls
</code></pre>

<p>You should see just the to-delete directory. If you tried to create a directory in a directory that did not exist, you would get an error. You can create nested directories at once by using the <code>-p</code> option, Like so:</p>

<pre><code>mkdir -p multiple/subdirectory/example
</code></pre>

<p>creates 3 new directories with those paths. Now lets says you need to get rid of a directory. For this we can use the <code>rmdir</code> command, which is short for 'remove directory'. Lets get rid of that pesky <code>to-delete</code> folder we made earlier, and the multiple directory example</p>

<pre><code>rmdir to-delete
rmdir multiple
rmdir: failed to remove `multiple': Directory not empty
</code></pre>

<p>You'll see that you get the following error message since <code>multiple</code> is not empty. <code>rmdir</code> can only remove empty directories.  Later in this artice we will discuss how can remove entire directories of files</p>

<h3>Creating and Deleting Files</h3>

<p>Now we can start creating and deleting files as well as directories. Let's start with the <code>touch</code> command. <code>touch</code> is to files what <code>mkdir</code> is to directories. so let's create a file:</p>

<pre><code>touch to-delete
ls
</code></pre>

<p>This creates an empty file named <code>to-delete</code>. To actually delete this file, we use the <code>rm</code> command, which is short for remove:</p>

<pre><code>rm to-delete
</code></pre>

<p>rm can also be used on directories, by using the <code>-r</code> option, which is short for recursive. This will also remove all the contents inside of a directory.  Occasionally you may get a prompt asking if you are sure you want to delete something. You can get rid of this with the <code>-f</code> option. You can use this to get rid of the <code>multiple</code> directory you created earlier</p>

<pre><code>rm -rf multiple
</code></pre>

<p>If you want to open and edit text files, you will need to get accquainted with a good text editor. <a href="http://www.vim.org/">Vim</a> and <a href="http://www.gnu.org/software/emacs/">Emacs</a> Are the two most popular, but both are very complex and a whole series of tutorials could be written on either one.</p>

<p><strong>WARNING</strong></p>

<p>It is a common joke on the internet to try to get people to run the command <code>rm -rf /</code> in the terminal. <code>/</code> refers to the base directory of your entire filesystem, so <code>rm -rf /</code> basically translates into "delete my everything forever, and don't ask for my permission". It is a <em>seriously</em> dangerous command to run, and now you know why.</p>

<h3>Copying And Moving Files and Directories</h3>

<p>Let's start by creating a couple more directories for this section:</p>

<pre><code>mkdir cars
mkdir vechicles
</code></pre>

<p>You may have decided that you made a mistake, and the <code>cars</code> directory should be inside of the <code>vehicles</code> directory. For situations like these, we have the <code>mv</code> command, which is short for move:</p>

<pre><code>mv cars vechicles/cars
</code></pre>

<p>The first option of the <code>mv</code> command is the directory you would like to move, the second argument being where you would like it to go. Since the names do not nessicarily have to match, <code>mv</code> also acts as a 'rename' operation for files and directories. If you want to <em>guarantee</em> the names match (and save you some typing), you can replace the final name of the file/directory with a <code>.</code> character, so these two commands are equivalent:</p>

<pre><code>mv cars vehicles/cars
mv cars vehicles/.
</code></pre>

<p>If you wanted to maintain the original <code>cars</code> directory and just put a copy of it in the <code>vehicles</code> directory, then you can do that wih the <code>cp</code> command, which is short for "copy".  Much like <code>rm</code>, <code>cp</code> works with both files and directories, but requires a <code>-r</code> for directories. The structure of the arguments is the same as <code>mv</code> though. So copying <code>cars</code> would have looked like this:</p>

<pre><code>cp -r cars vehicles/.
</code></pre>

<p>Note that the <code>.</code> syntax to keep the same name still works here as well.</p>

<h3>Protip: Tab Completion</h3>

<p>All of this typing on the command line can get tiresome. One of the best tricks to learn to cut down on the amount of keystrokes it takes to type commands is to learn about and get used to frequently using tab completion. If you type the first few letters of a directory or file name and hit tab, the shell will complete it for you! You must type enough characters for it to be unique. If not, pressing tab twice on most shells will show you all the directories and files that match the start of the name you typed. so for example, if you typed this:</p>

<pre><code>mkdir terminal-tutorial
cd te   
</code></pre>

<p>and this pressed the tab button, the terminal should automatically fill out:</p>

<pre><code>cd terminal-tutorial
</code></pre>

<p>Now we have a good set of tools for working with and manipulating the file system. Next time we'll take a look at users, groups, and the permissions system that UNIX is based on.</p>
]]></content>
  </entry>
  
</feed>
