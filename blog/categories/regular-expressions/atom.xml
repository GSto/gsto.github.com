<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: regular expressions | Essentialist Software Design]]></title>
  <link href="http://glennstovall.com/blog/categories/regular-expressions/atom.xml" rel="self"/>
  <link href="http://glennstovall.com/"/>
  <updated>2015-08-28T10:15:11-04:00</updated>
  <id>http://glennstovall.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Eureka Moment With Regular Expressions]]></title>
    <link href="http://glennstovall.com/blog/2012/03/06/my-eureka-moment-with-regular-expressions/"/>
    <updated>2012-03-06T13:49:00-05:00</updated>
    <id>http://glennstovall.com/blog/2012/03/06/my-eureka-moment-with-regular-expressions</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/articles/my_eureka_moment.jpg">
Regular expressions are a tough cookie for most programmers to figure out. They are <em>terrifying</em> to look at with their daunting syntax. There is also nothing quite like regular expressions anywhere in programming. programmers may learn to hack together basic regex expressions, or how to cut and paste some they find online for their needs, but it can be tricky to get a real grasp of the concept. Here I'd like to explain the line of thinking that finally led to me grokking regex.</p>

<!-- more -->


<p>For reference, I'll be using the PERL-style regular expression syntax used by languages like PHP. Here's a <a href="http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/">Regular Expressions Cheat Sheet</a> That I'll be referencing throughout this article, and it is a great resource to keep around.</p>

<h2>Regular Expressions: A Language Unto Itself</h2>

<p>The tricky thing about regular expressions is that it is its own language within a programming language. It has its own collection of symbols and syntax. Those long, scary strings that regexes are made up of are collections of these <em>symbols</em> and are used to make the <em>pattern</em> you want to match. Think of a regular expression as a <em>sentence</em>, and each one of the symbols as a <em>word</em>.</p>

<h2>Writing "Words" in Regular Expressions</h2>

<p>Most of the words of your regular expression are going to be made of a few different language constructs:</p>

<ul>
<li><strong>Ranges</strong> : defining a set of characters that can match. Common examples are <code>[A-Z]</code>, which means all capital letters, <code>[0-9]</code> or which means all digits. These can be combined as well. A common on is <code>[A-Za-z0-9-_]</code> which would match all letters, numbers, hyphens, and underscores.</li>
<li><strong>Character Classes</strong> : similar to ranges. <code>\s</code> means 'any white space character', where <code>\S</code> means 'any non-white space character'.</li>
<li><strong>Metacharacters</strong> : characters that have thier own special meaning, the most common being the pipe <code>|</code> character, which means 'or' similar to <code>||</code> in most programming languages. A subset of metacharacters is <em>anchors</em>, where can denote the beginning of a string (<code>^</code>) or the end of a string (<code>$</code>).</li>
<li><strong>Quantifiers</strong> : quantifiers are a kind of 'modifier' to the above patterns. These let you tell the pattern how many of the previous pattern to look for. The common ones are: <code>*</code> for 0 or more, <code>+</code> for 1 or more, and <code>?</code> for 0 or 1. You can also explicity state an amount with something like <code>{5}</code> for 5 characters, or a range, such as <code>{3-6}</code>, which matches anywhere between three and six characters.</li>
</ul>


<h2>Building Patterns with Words</h2>

<p>Let's look at the following example problem:</p>

<pre><code>we have a system that has to match social security numbers. 
They can look like any of the following:

123-45-6789
123/45/6789
123456789
</code></pre>

<p>so, now that we have the set of patterns we want to match, we can start building up smaller words to match each part of the pattern. Writing regular expressions is similar to writing functions or classes: you start by breaking down the problem, figuring out smaller parts of it, and then start working on combining these smaller solutions into a large one. So let's start by writing out our pattern in plain English:</p>

<ul>
<li>We have the start of the string,</li>
<li>then three digits,</li>
<li>then either a hyphen, forward slash, or neither,</li>
<li>then two digits,</li>
<li>then either a hyphen, forward slash, or neither,</li>
<li>then four digits,</li>
<li>and that is the end of the string.</li>
</ul>


<p>So, let's look at this step by step:</p>

<ul>
<li><strong>We have the start of the string</strong> : this is where we start with one of the anchors we mentioned earlier, <code>^</code>.</li>
<li><strong>Three Digits</strong> : We discussed the range of digits earlier (<code>[0-9]</code>), but that only matches a single digit. To match exactly 3, we will need a quantifier as well. So this word can be written as <code>[0-9]{3}</code>.</li>
<li><strong>Either a hyphen, forward slash, or neither</strong> : this is going to take another quantifier, but which one? It helps if we rephrase this statement a bit, and think of it as this: "exactly 0 or 1 hyphen or forward slash". Now we can see that we need the <code>?</code> quantifier. We also see that we'll need to use an 'or' for this statement. For statements like this, you can wrap this part of the expression in parenthesis so that its clear whats going on. The answer here is <code>(-|/)?</code>. Declaring parts of a regular expression inside of parenthesis like this is called defining a <em>sub-pattern</em></li>
<li><strong>Two Digits</strong> : similar to above: <code>[0-9]{2}</code>.</li>
<li><strong>Either a hyphen, forward slash, or neither</strong> : same as above: <code>(-|/)?</code>.</li>
<li><strong>Four Digits</strong> : similar to above: <code>[0-9]{4}</code>.</li>
<li><strong>End of the String</strong> : another anchor, the <code>$</code> one this time.</li>
</ul>


<p>So, now let's put that all together, and we have a full regular expression:</p>

<p><code>^[0-9]{3}(-|/)?[0-9]{2}(-|/)?[0-9]{4}$</code></p>

<p>Tada! Now that you can see how the regular expressions is really just a bunch of small parts that fit together, hopefully you can figure out how to both write your own regular expressions, and read other ones you come across.</p>

<p>This is just the tip of the regex iceberg though. There is a whole lot more you can do with it that is much more than the span of this article. Play around with them, refer back to the cheat sheet, and see what you can come up with.</p>

<p><strong>Edit</strong></p>

<p>I realized there was a small problem with the regular expression above. While this work for most of our cases, there is the scenario of getting a number formatted like so: <code>123-45/6789</code> which the pattern would match, even though it is not in a valid format. I asked about this on <a href="http://stackoverflow.com/questions/9624081/matching-delimiters-with-regular-expressions/9624128">Stack Overflow</a> And learned about using <em>back references</em> for situations like this. you can use the syntax <code>\1</code> where 1 is the number of the sub pattern you want to reference. By doing so, you can make sure that the second delimiter matches the first. So our regular expression would now look like this:</p>

<p><code>^[0-9]{3}(-|/)?[0-9]{2}\1?[0-9]{4}$</code></p>
]]></content>
  </entry>
  
</feed>
