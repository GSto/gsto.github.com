<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Essentialist Software Design]]></title>
  <link href="http://glennstovall.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://glennstovall.com/"/>
  <updated>2015-08-27T14:33:07-04:00</updated>
  <id>http://glennstovall.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing AngularJS With Karma + Jasmine]]></title>
    <link href="http://glennstovall.com/blog/2014/09/26/testing-angularjs-with-karma-plus-jasmine/"/>
    <updated>2014-09-26T15:34:00-04:00</updated>
    <id>http://glennstovall.com/blog/2014/09/26/testing-angularjs-with-karma-plus-jasmine</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/angular.png" width="260"></p>

<p>In a previous article about <a href="http://glennstovall.com/blog/2014/09/22/yeoman-plus-angularjs-plus-foundation-a-modern-front-end-setup/">Yeoman, AngularJS, and Foundation</a>, I talked about setting up a complete front end application scaffold with Yeoman, AngularJS, and Foundation. Now I want to look at how to test the AngularJS part of your application.</p>

<!-- more -->


<div style='clear:both;'></div>


<h2>The Tools</h2>

<h3>Karma</h3>

<p><a href="http://karma-runner.github.io/0.12/index.html">Karma</a> is a test runner for NodeJS. You can use it to simulate multiple devices. What Karma isn't is a testing framework itself. It is designed to work with multiple testing frameworks, such as <a href="http://jasmine.github.io/">Jasmine</a>, <a href="http://qunitjs.com/">QUnit</a>, or <a href="http://visionmedia.github.io/mocha/">Mocha</a>.</p>

<h3>Jasmine</h3>

<p>I'm using Jasmine for a couple of reasons:</p>

<ul>
<li>I looked into Jasmine and QUnit before, and I have never seen two tools as similar. Their syntax is different, but how they function is <em>identical</em> last time I checked. Months ago I flipped a coin, it was 'tails', and I implemented Jasmine on a client project. No real reason to change.</li>
<li>I haven't looked into Mocha. It might be better, or worse, or also identical. I don't know. If <strong>you</strong> have an opinion, <a href="http://www.glennstovall.com/contact">let me know</a>.</li>
<li>It's installed by default by Yeoman ... sort of.</li>
</ul>


<h2>Step 1: Fix The Missing Dependencies</h2>

<p>For some reason, the <code>generator-angular</code> generator comes with some, but not all of the tools we'll need for running tests with Karma and Jasmine, so we need to fix that before we get started. Run the following lines on the command line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install grunt-karma --save-dev
</span><span class='line'>npm install karma-phantomjs-launcher --save-dev
</span><span class='line'>npm install karma-jasmine --save-dev</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 2: Test the Tests</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt test</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This should ensure that everything is installed correctly. If you running a clean install from Yeoman, then it should run that test. You can look at the file /test/spec/controllers/MainCtrl.js for an example of what a test looks like.</p>

<h2>Step 3: Create A Simple Test</h2>

<p>Here is an example test, just to get you comfortable with the Jasmine testing Syntax. Create a file at <code>test/spec/app.js</code>, and write the following code:</p>

<p>``` javascript
'use strict'</p>

<p>describe('javascript', function() {
  it('should know 2 + 2 is 4', function() {</p>

<pre><code>expect(2 + 2).toEqual(4);
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>I enjoy jasmine's matchers and syntax because it reads like english.</p>

<p><code>describe()</code> is how you group your tests into suites. You can nest <code>describe()</code> calls as many levels deep as youwish, though any more than two and it gets really difficult to read and manage. <code>it()</code> is how you run tests. The first argument is the description, the second is the test itself. <code>expect()</code> is where you test your assumptions in the test, and <code>toEqual()</code> is your matcher. you can also add <code>not()</code> before any more matcher to test the opposite:</p>

<p>``` javascript</p>

<p>//it's 2014, not 1984 ... I think
it('should know 2 + 2 is not 5', function() {
  expect(2 + 2).not().toEqual(5);
});</p>

<p>```</p>

<p>If you want to know what other matchers are available to you with Jasmine, here is a handy <a href="http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing/">Jasmine Cheat Sheet</a></p>

<h2>Step 4: Now For a Real Test</h2>

<p>By default, Yeoman comes with a controller test, you can see how it works there:</p>

<p>``` javascript</p>

<p>describe('Controller: MainCtrl', function () {</p>

<p>  // load the controller's module
  beforeEach(module('ngFoundationApp'));</p>

<p>  var MainCtrl,
  scope;</p>

<p>  // Initialize the controller and a mock scope
  beforeEach(inject(function ($controller, $rootScope) {</p>

<pre><code>    scope = $rootScope.$new();
    MainCtrl = $controller('MainCtrl', {
      $scope: scope
    });
}));
</code></pre>

<p>  it('should attach a list of awesomeThings to the scope', function () {</p>

<pre><code>    expect(scope.awesomeThings.length).toBe(3);
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>Here you see some of the other handy features, such as <code>beforeEach()</code>. <code>beforeEach()</code> takes a function as an argument, and calls it before each test.</p>

<h2>Dependency Injection and Testing</h2>

<p>When you start writing tests you will begin to see why <a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a> is so valuable. When you create services in Angular, you want to pass them as arguments instead of creating them directly. This way, you can create mock versions of anything for testing.</p>

<p>Here is an example test from a client project:</p>

<p>``` javascript</p>

<p>it('should use tasks to set price if that is the invoice_method selected', function() {
  $injector.invoke(function(Project, Feature) {
  var mock = new Project(mock_project()).prepare();
  mock.invoice_method = 'task';
  mock.estimate.tasks = [</p>

<pre><code>mock_task({'tID' : 1, 'time' : 5, 'rate' : 100, 'billable' : true}),
mock_task({'tID' : 1, 'time' : 5, 'rate' : 100, 'billable' : true}),
</code></pre>

<p>  ];</p>

<p>  mock.updatePrice();
  expect(mock.estimate.price).toEqual(1000);
});</p>

<p>```</p>

<p>I created functions that would return mock objects such as <code>mock_project()</code> and <code>mock_task()</code>. This way, I can test the <code>Project</code> object without the <code>Task</code> object. This way, all of my tests are completely self-contained, the waygood unit tests should be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Test Controller Concerns in Rails 4]]></title>
    <link href="http://glennstovall.com/blog/2014/05/06/how-to-test-controller-concerns-in-rails-4/"/>
    <updated>2014-05-06T15:06:00-04:00</updated>
    <id>http://glennstovall.com/blog/2014/05/06/how-to-test-controller-concerns-in-rails-4</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/articles/ruby_on_rails.jpg" width="260"></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">Concerns</a> are a new feature that was added in Rails 4. They allow to clean up code in your models and controllers. They also allow you to share functionality between models or controllers. However, they can be a bit tricky to test in isolation. In this article I want to show how you can test your controller concerns in isolation.</p>

<!-- more -->


<h2>The Over Simplified Scenario</h2>

<p>We have a project with several different types of objects that can be sold. Each item is unique and is marked as 'out of stock' once it is purchased. However, we have several different controllers and different types of purchases that need this functionality. In order to reduce code duplication, we are going to put these in a concern.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/app/controllers/concerns/transaction_processing.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TransactionProcessing</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  included do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">helper_method</span> <span class="ss">:process_sale</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def process_sale(item)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">item</span><span class="o">.</span><span class="n">is_in_stock</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If we want to test this concern, we need a controller to include it in. However, it would not be accurately unit testing to do this as there could be code in that controller that could affect the output of our test. Inside of our test, we can create a fake controller with no methods or logic of it's own, and then write tests for that. If you are using <a href="http://rspec.info/">RSpec</a>, you can call methods directly using the <code>subject</code> object. Here is my example test using RSpec and <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/spec/controllers/concerns/transaction_processing_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class FakesController &amp;lt; ApplicationController</span>
</span><span class='line'><span class="sr">  include TransactionProcessing</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">describe</span> <span class="no">FakesController</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  it &quot;should mark an item out of stock&quot; do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">item</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="n">is_in_stock</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">subject</span><span class="o">.</span><span class="n">process_sale</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">is_in_stock</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span> <span class="kp">false</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And there you go! Easy, isolated tests for your controller concerns.</p>
]]></content>
  </entry>
  
</feed>
