<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Software That Sells]]></title>
  <link href="http://glennstovall.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://glennstovall.com/"/>
  <updated>2015-07-01T14:58:37-04:00</updated>
  <id>http://glennstovall.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Real World Metaprogramming Case Study]]></title>
    <link href="http://glennstovall.com/blog/2015/06/24/a-real-world-metaprogramming-case-study/"/>
    <updated>2015-06-24T17:01:00-04:00</updated>
    <id>http://glennstovall.com/blog/2015/06/24/a-real-world-metaprogramming-case-study</id>
    <content type="html"><![CDATA[<p>Metaprogramming is one of the unique features of Ruby. Metaprogramming is an interesting concept, and a tool can save a lot of time. It can also be confusing for developers and difficult to maintain if not used properly. Here is an example of how I used Metaprogramming to solve a real-world problem and save a few hours coding.</p>

<!-- more -->


<h2>Serializers With Duplicate Code</h2>

<p>I’m working on an application that used for managing vacation bookings. The application needs an API to integrate with some business partners. As part of the specification, dates should be returned in the API in a “YYYY-MM-DD” format.</p>

<p>To build the API, I’ll be using <a href="https://github.com/rails-api/active_model_serializers">ActiveRecord::Serializer</a> to customize the JSON output.</p>

<p>Here’s a snippet from the reservation serializer class:</p>

<p>```ruby
 class ReservationSerializer &lt;&lt; ActiveModel::Serializer
   attributes :starts_on, :ends_on, :posted_on, :reserved_on</p>

<p>   def starts_on</p>

<pre><code> object.starts_on.strftime("%F")
</code></pre>

<p>   end
   def ends_on</p>

<pre><code> object.ends_on.strftime("%F")
</code></pre>

<p>   end
   def posted_on</p>

<pre><code> object.posted_on.strftime("%F")
</code></pre>

<p>   end
   def reserved_on</p>

<pre><code> object.reserved_on.strftime("%F")
</code></pre>

<p>   end
 end
```</p>

<p>This method works because you can override any attribute in a serializer class. The problem is that this is going to be a lot of duplicate code. There are also several other API endpoints that need to deal with dates.</p>

<p>Wouldn’t be nice if we could format dates without writing a bunch of duplicate methods?</p>

<h2>Creating a Super Class That Can Create Methods</h2>

<p>In Ruby, parent classes have the ability to modify its children. We are going to use this ability to define methods on our serializers <em>without</em> writing them by hand.</p>

<p>We’ll start by creating an <code>ApplicationSerializer</code> from which each of out serializers will inherit.</p>

<p><code>ruby
 class ApplicationSerializer &lt;&lt; ActiveModel::Serializer
 end
</code></p>

<p>Inside of this superclass, we are going to define a <code>formatted_date</code> class method that we will use in our subclasses.</p>

<p>Here’s what the final result looks like:</p>

<p>```ruby
   def self.formatted_date(options = {})</p>

<pre><code> attribute = options[:attribute] || nil
 format = options[:format] || "%F"

 if attribute.present?
   define_method(attribute) do 
     object[attribute].strftime(format)
   end
 end
</code></pre>

<p>   end
```</p>

<p>Let’s break this down:</p>

<ul>
<li>First, we pass an options hash that will take the attribute and the format we will use. We are defaulting to the YYYY-MM-DD format, but this gives other developers the option to override that if needed.</li>
<li>Then, We check that an attribute is passed, and if so, we call the <code>define_method</code> method. We will use this to create methods in our subclass. Note that the created method’s name will be the same as the attribute.</li>
<li>Finally, We pass a block to <code>define_method</code>. This block will become the body of the new method. Note that the block uses the <code>object</code> property, which belongs to the subclass and not ApplicationSerializer.</li>
</ul>


<h2>Creating Our Dynamic Methods</h2>

<p>Inside of our <code>ReservationSerializer</code> class, we change the super class to <code>ApplicationSerializer.</code> Changing the parent class gives us the added ability to create new date attribute methods on the fly. Now writing this:</p>

<p><code>ruby
 formatted_date :attribute =&gt; :starts_on
</code></p>

<p>is <strong>exactly</strong> the same as writing this:</p>

<p><code>ruby
 def starts_on
   object.starts_on.strftime("%F")
 end
</code></p>

<h2>Our Updated Class</h2>

<p> Let’s take a look at our new <code>ReservationSerializer</code>:</p>

<p>```ruby
 class ReservationSerializer &lt; ApplicationSerializer
   attributes :starts_on, :ends_on, :posted_on, :reserved_on</p>

<p>   formatted_date :attribute => :starts_on
   formatted_date :attribute => :ends_on
   formatted_date :attribute => :posted_on
   formatted_date :attribute => :reserved_on
 end
```</p>

<p>Not only is this cleaner to read and less duplicate code, but we have this functionality available in all of our serializers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove the Hash from Angular Routes in Rails]]></title>
    <link href="http://glennstovall.com/blog/2015/03/16/how-to-remove-the-hash-from-angular-routes-in-rails/"/>
    <updated>2015-03-16T19:04:00-04:00</updated>
    <id>http://glennstovall.com/blog/2015/03/16/how-to-remove-the-hash-from-angular-routes-in-rails</id>
    <content type="html"><![CDATA[<p>When building client side applications, your URLs are prepended with a hash. Removing this can make your routes more user friendly and more easily crawled by search engines. Here is how you can remove the hash from your routes in an Angular app built on Ruby on Rails, and use the standard URL structure.</p>

<!-- more -->


<h2>Step 0: Our example Application</h2>

<p>We’ll look at a recipe site for our example application. In our application, we’ll have a homepage, a recipe route that shows us all of the recipes, and a route for single recipes. Here is our application configuration:</p>

<p>```javascript
 var app = angular.module("recipeapp");</p>

<p> app.config(["$routeProvider",function($routeProvider) {
   $routeProvider</p>

<pre><code> .when("/", {
   templateUrl: "templates/index.html",
   controller: "IndexController"
 })
 .when("/recipes/, {
   templateUrl: "templates/recipes.html",
   controller: "RecipesController"
 })
 .when("/recipes/:id", {
   templateUrl: "templates/recipe_show.html",
   controller: "RecipeShowController"
 });
</code></pre>

<p> }]);
```</p>

<h2>Step 1: Remove The Hash</h2>

<p>First, we will enable [HTML5 Mode] in our AngularJS application. This will remove the hash from our URLs. Include <code>$locationProvider</code> in your module’s configuration, and set the mode to true.</p>

<p><code>javascript
 app.config(['$routeProvider','$locationProvider', function($routeProvider, $locationProvider) {
   $locationProvider.html5mode(true);
   // ...
  }]);
</code></p>

<h2>Step 2: Configure Rails To Handle Angular Routes</h2>

<p>The above will work for cases when the user navigates from one part of the AngularJS application to another. However, if they try to navigate directly, they will get an error. If the user tries to navigate to <code>/recipes/1</code> directly, or hits refresh on that page, the request is sent to the Ruby on Rails router instead of Angular.</p>

<p>To fix this, we need to capture those requests. In you <code>app/config/routes.rb</code> at the end:</p>

<p><code>ruby
get '/\*path' =&gt; redirect('/?goto=%{path}')
</code></p>

<p>This will cause any uncaught routes to get redirected as a query string, which will be passed to the Angular router.</p>

<h2>Step 3: Handle Rails Redirects</h2>

<p>Angular needs to know how to handle these routes, so we will add a call to the <code>otherwise()</code> method of <code>$routeProvider</code>:</p>

<p>```javascript
 $routeProvider.otherwise({
   redirectTo: function(current, path, search) {</p>

<pre><code> if(search.goto) {
   return '/' + search.goto;
 }
   return '/'
</code></pre>

<p>   }
 });
```</p>

<p>Now any URL will get redirected to Angular, which will handle the route. This way you don’t have to maintain two lists of routes, and you can use standard URL formats in your application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Reliable Web Apps Show Notes]]></title>
    <link href="http://glennstovall.com/blog/2015/01/05/building-reliable-web-apps-show-notes/"/>
    <updated>2015-01-05T09:17:00-05:00</updated>
    <id>http://glennstovall.com/blog/2015/01/05/building-reliable-web-apps-show-notes</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/js-test-talk.jpeg" width="260"></p>

<p>These are notes and links from a presentation I gave to the Developers of Athens on testing client side applications.</p>

<!--more-->


<div style='margin-left:auto;margin-right:auto;max-width:25em;'>
<iframe src="http://glennstovall.com//www.slideshare.net/slideshow/embed_code/43211030" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="display:block"></iframe>
</div>


<h2>Tools</h2>

<ul>
<li><a href="http://nodejs.org/download/">NodeJS Download</a></li>
<li><a href="http://gruntjs.com/getting-started">Grunt: JavaScript Task Runner</a></li>
<li><a href="http://jasmine.github.io/">Jasmine: JavaScript Testing Framework</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li><a href="http://phantomjs.org/">PhantomJS</a></li>
</ul>


<h2>Addon Libraribes</h2>

<ul>
<li><a href="https://github.com/gruntjs/grunt-contrib-jasmine">grunt-contrib-jasmine</a></li>
<li><a href="https://github.com/jasmine/jasmine/tree/master/dist">jasmine standalone</a></li>
<li><a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a></li>
<li><a href="http://jasmine.github.io/2.1/ajax.html">jasmine-ajax</a></li>
</ul>


<h2>Source Code</h2>

<p>The source code for an example application can be found on this page:</p>

<p><a href="https://github.com/GSto/reliable-client-side">Example Application</a></p>

<h2>Further Reading</h2>

<ul>
<li><a href="http://glennstovall.com/blog/2014/09/22/yeoman-plus-angularjs-plus-foundation-a-modern-front-end-setup/">Yeoman + AngularJS + Foundation: A Modern Front End Setup</a></li>
<li><a href="http://glennstovall.com/blog/2014/09/26/testing-angularjs-with-karma-plus-jasmine/">Testing AngularJS With Karma + Jasmine</a></li>
<li><a href="http://glennstovall.com/blog/2013/06/27/angularjs-an-overview/">AngularJS: An Overview</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing AngularJS With Karma + Jasmine]]></title>
    <link href="http://glennstovall.com/blog/2014/09/26/testing-angularjs-with-karma-plus-jasmine/"/>
    <updated>2014-09-26T15:34:00-04:00</updated>
    <id>http://glennstovall.com/blog/2014/09/26/testing-angularjs-with-karma-plus-jasmine</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/angular.png" width="260"></p>

<p>In a previous article about <a href="http://glennstovall.com/blog/2014/09/22/yeoman-plus-angularjs-plus-foundation-a-modern-front-end-setup/">Yeoman, AngularJS, and Foundation</a>, I talked about setting up a complete front end application scaffold with Yeoman, AngularJS, and Foundation. Now I want to look at how to test the AngularJS part of your application.</p>

<!-- more -->


<div style='clear:both;'></div>


<h2>The Tools</h2>

<h3>Karma</h3>

<p><a href="http://karma-runner.github.io/0.12/index.html">Karma</a> is a test runner for NodeJS. You can use it to simulate multiple devices. What Karma isn't is a testing framework itself. It is designed to work with multiple testing frameworks, such as <a href="http://jasmine.github.io/">Jasmine</a>, <a href="http://qunitjs.com/">QUnit</a>, or <a href="http://visionmedia.github.io/mocha/">Mocha</a>.</p>

<h3>Jasmine</h3>

<p>I'm using Jasmine for a couple of reasons:</p>

<ul>
<li>I looked into Jasmine and QUnit before, and I have never seen two tools as similar. Their syntax is different, but how they function is <em>identical</em> last time I checked. Months ago I flipped a coin, it was 'tails', and I implemented Jasmine on a client project. No real reason to change.</li>
<li>I haven't looked into Mocha. It might be better, or worse, or also identical. I don't know. If <strong>you</strong> have an opinion, <a href="http://www.glennstovall.com/contact">let me know</a>.</li>
<li>It's installed by default by Yeoman ... sort of.</li>
</ul>


<h2>Step 1: Fix The Missing Dependencies</h2>

<p>For some reason, the <code>generator-angular</code> generator comes with some, but not all of the tools we'll need for running tests with Karma and Jasmine, so we need to fix that before we get started. Run the following lines on the command line:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install grunt-karma --save-dev
</span><span class='line'>npm install karma-phantomjs-launcher --save-dev
</span><span class='line'>npm install karma-jasmine --save-dev</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Step 2: Test the Tests</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt test</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This should ensure that everything is installed correctly. If you running a clean install from Yeoman, then it should run that test. You can look at the file /test/spec/controllers/MainCtrl.js for an example of what a test looks like.</p>

<h2>Step 3: Create A Simple Test</h2>

<p>Here is an example test, just to get you comfortable with the Jasmine testing Syntax. Create a file at <code>test/spec/app.js</code>, and write the following code:</p>

<p>``` javascript
'use strict'</p>

<p>describe('javascript', function() {
  it('should know 2 + 2 is 4', function() {</p>

<pre><code>expect(2 + 2).toEqual(4);
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>I enjoy jasmine's matchers and syntax because it reads like english.</p>

<p><code>describe()</code> is how you group your tests into suites. You can nest <code>describe()</code> calls as many levels deep as youwish, though any more than two and it gets really difficult to read and manage. <code>it()</code> is how you run tests. The first argument is the description, the second is the test itself. <code>expect()</code> is where you test your assumptions in the test, and <code>toEqual()</code> is your matcher. you can also add <code>not()</code> before any more matcher to test the opposite:</p>

<p>``` javascript</p>

<p>//it's 2014, not 1984 ... I think
it('should know 2 + 2 is not 5', function() {
  expect(2 + 2).not().toEqual(5);
});</p>

<p>```</p>

<p>If you want to know what other matchers are available to you with Jasmine, here is a handy <a href="http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing/">Jasmine Cheat Sheet</a></p>

<h2>Step 4: Now For a Real Test</h2>

<p>By default, Yeoman comes with a controller test, you can see how it works there:</p>

<p>``` javascript</p>

<p>describe('Controller: MainCtrl', function () {</p>

<p>  // load the controller's module
  beforeEach(module('ngFoundationApp'));</p>

<p>  var MainCtrl,
  scope;</p>

<p>  // Initialize the controller and a mock scope
  beforeEach(inject(function ($controller, $rootScope) {</p>

<pre><code>    scope = $rootScope.$new();
    MainCtrl = $controller('MainCtrl', {
      $scope: scope
    });
}));
</code></pre>

<p>  it('should attach a list of awesomeThings to the scope', function () {</p>

<pre><code>    expect(scope.awesomeThings.length).toBe(3);
</code></pre>

<p>  });
});</p>

<p>```</p>

<p>Here you see some of the other handy features, such as <code>beforeEach()</code>. <code>beforeEach()</code> takes a function as an argument, and calls it before each test.</p>

<h2>Dependency Injection and Testing</h2>

<p>When you start writing tests you will begin to see why <a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a> is so valuable. When you create services in Angular, you want to pass them as arguments instead of creating them directly. This way, you can create mock versions of anything for testing.</p>

<p>Here is an example test from a client project:</p>

<p>``` javascript</p>

<p>it('should use tasks to set price if that is the invoice_method selected', function() {
  $injector.invoke(function(Project, Feature) {
  var mock = new Project(mock_project()).prepare();
  mock.invoice_method = 'task';
  mock.estimate.tasks = [</p>

<pre><code>mock_task({'tID' : 1, 'time' : 5, 'rate' : 100, 'billable' : true}),
mock_task({'tID' : 1, 'time' : 5, 'rate' : 100, 'billable' : true}),
</code></pre>

<p>  ];</p>

<p>  mock.updatePrice();
  expect(mock.estimate.price).toEqual(1000);
});</p>

<p>```</p>

<p>I created functions that would return mock objects such as <code>mock_project()</code> and <code>mock_task()</code>. This way, I can test the <code>Project</code> object without the <code>Task</code> object. This way, all of my tests are completely self-contained, the waygood unit tests should be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman + AngularJS + Foundation: A Modern Front End Setup]]></title>
    <link href="http://glennstovall.com/blog/2014/09/22/yeoman-plus-angularjs-plus-foundation-a-modern-front-end-setup/"/>
    <updated>2014-09-22T14:18:00-04:00</updated>
    <id>http://glennstovall.com/blog/2014/09/22/yeoman-plus-angularjs-plus-foundation-a-modern-front-end-setup</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/angular.png" width="260"></p>

<p>With the combination of modern browsers and mobile devices having support for HTML5, CSS3, and new JavaScript APIs, front end development has become a lot more complex and exciting. There has been an explosion of tools as of late, and it can be daunting to know where to get started. Here are the tools and process I use in order to build a new front end application from scratch.</p>

<!-- more -->


<h3>The Tools</h3>

<ul>
<li><strong>Yeoman</strong> : For scaffolding our web application.</li>
<li><strong>Bower</strong> : For front-end dependency management.</li>
<li><strong>Grunt</strong> : Command line tool for development.</li>
<li><strong>AngularJS</strong> : JavaScript framework based on the principals of dependency injection.</li>
<li><strong>Foundation</strong>: Responsive SCSS Framework to speed up design.</li>
</ul>


<h3>Step 1: Install Yeoman and a Generator</h3>

<p>We'll be using <a href="http://yeoman.io/">Yeoman</a> to handle all of our scaffolding. Yeoman will create the initial files and folder structure for you, so that you don't have too. Yeoman uses generators, which are different templates it will use when creating your initial app. Yeoman is managed via npm. If you don't have node and npm installed, you can get the <a href="http://nodejs.org/download/">NodeJS installer here</a>. I prefer building web applications with <a href="http://glennstovall.com/blog/2013/06/27/angularjs-an-overview/">AngularJS</a>, so we'll be installing a generator for an Angular application.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo
</span><span class='line'>npm install -g generator-angular</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 2: Create The Scaffolding</h3>

<p>Now that we have our tools installed, it's time to create our initial application. We'll create a new directory and run the generator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir example-app
</span><span class='line'>cd example-app
</span><span class='line'>yo angular</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you have everything installed correctly, Yeomen should start building your application. Select 'yes' when it asks you if you want to install compass, then select no when it asks if you if you want to install Bootstrap. After a couple of minutes, you folder structure should look like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Gruntfile.js
</span><span class='line'>/app
</span><span class='line'>bower.json
</span><span class='line'>bower_components
</span><span class='line'>node_modules
</span><span class='line'>package.json
</span><span class='line'>/test</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 3: Install Dependencies</h3>

<p>Now we need to run our package managers to install dependencies. First, we will run NPM in order to install development dependencies, then <a href="http://bower.io/">Bower</a> to install front end dependencies:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install
</span><span class='line'>bower install</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Step 4: Test The Servers</h3>

<p>Run the server and make sure everything is working OK:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt serve</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once this runs, navigate to <code>localhost:9000</code>. You should see the yeoman placeholder page.</p>

<h3>Step 5: Clean out the Crud.</h3>

<p>Yeoman adds a lot of content that is not needed. For example, it has multiple routes, controllers, and views already created for you. You can leave this in or comment it out if you want to keep an example, but I like to clear all of this out before I start working. Here is a quick checklist, so you don't miss anything.</p>

<ul>
<li><code>app/index.html</code> - Remove most of the code in the body, but be sure to leave the div with the <code>ng-view</code> property.</li>
<li><code>app/views/main.html</code> - Remove the excess HTML.</li>
<li><code>app/scripts/app.js</code> - Remove the routes that you aren't using. I get rid of the extra 'about' route, and delete all the related files.</li>
<li>remove <code>app/controllers/about.js</code></li>
<li>remove <code>app/views/about.html</code></li>
<li>remove <code>spec/controllers/about.js</code></li>
<li><code>app/styles/main.scss</code> - Remove all of the unused styles.</li>
</ul>


<h3>Step 6: Install Foundation</h3>

<p>I prefer <a href="http://foundation.zurb.com/">Zurb's Foundation</a> to <a href="http://getbootstrap.com/2.3.2/">Twitter's Bootstrap</a>. In my opinion, it's easier to use and has cleaner markup. Since we are using Bower, this process is simple. Run the following command from the root directory of your project:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install foundation --save</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>save</code> flag will update your <code>bower.json</code> file. If you want to use any of the JavaScript functionality of Foundation, add the following to your app.js file after <code>use strict</code>:</p>

<p><code>javascript
  $(document).foundation();
</code></p>

<p>And Done!</p>

<p>Now you have a front end application ready for development, with a whole suite of tools and frameworks installed.</p>

<p>If you would like a PDF version of this article, you can get it below:</p>
]]></content>
  </entry>
  
</feed>
