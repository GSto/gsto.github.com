<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeigniter | Glenn Stovall]]></title>
  <link href="http://glennstovall.com/blog/categories/codeigniter/atom.xml" rel="self"/>
  <link href="http://glennstovall.com/"/>
  <updated>2014-12-28T15:53:32-05:00</updated>
  <id>http://glennstovall.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Cron Jobs and Command Line Scripts in CodeIgniter]]></title>
    <link href="http://glennstovall.com/blog/2013/01/07/writing-cron-jobs-and-command-line-scripts-in-codeigniter/"/>
    <updated>2013-01-07T23:58:00-05:00</updated>
    <id>http://glennstovall.com/blog/2013/01/07/writing-cron-jobs-and-command-line-scripts-in-codeigniter</id>
    <content type="html"><![CDATA[<p>{% img left /images/articles/codeigniter.jpg 260 %}
Building a command line interface into your application can be a way to add extra utility to you application. Adding cron jobs (a.k.a. scheduled tasks) to your CodeIgniter application can provide extra utility. In this article we'll show you how to set up both in a CodeIgniter application by writing a simple appointment reminder, which will remind people if they have an appointment scheduled a day in advance.</p>

<!-- more -->


<h3>Running Code Via The Command Line</h3>

<p>All CodeIgniter controller methods can be accessed via the command line. Let's start with a simple controller:</p>

<p>{% codeblock application/controllers/hello.php lang:php %}
&lt;?php
class Hello extends CI_Controller
{
  public function index()
  {</p>

<pre><code>  echo "Hello, World" . PHP_EOL;
</code></pre>

<p>  }</p>

<p>  public function greet($name)
  {
   echo "Hello, $name" . PHP_EOL;
  }
}</p>

<p>{% endcodeblock %}</p>

<p>From the root application forlder, to call the index function we can do the following:</p>

<pre><code>php index.php hello
</code></pre>

<p>By passing the name of the controller to <code>index.php</code> , we are able to invoke the index method of the controller. If we want to invoke other methods, we can pass them as the next aguments. any arguments proceeding those will be passed as arguments to the method we are calling. So, to get the output of "Hello, Glenn" from this controller, we would run the following:</p>

<pre><code>php index.php hello greet Glenn
</code></pre>

<h3>Detecting command line requests</h3>

<p>You may want to write controller methods that behave differently based on wether or not they are accessed via the command line. you can do this by using the <a href="http://ellislab.com/codeigniter/user-guide/libraries/input.html">input library</a>, which has a function called <code>is_cli_request()</code> to detect if a request to a controller is from the command line or not. Here is an example if you want to make a method only accesible via command line:</p>

<p>{% codeblock application/controllers/hello.php lang:php %}</p>

<pre><code>&lt;?php
public function greet($name)
{
    if(!$this-&gt;input-&gt;is_cli_request()) 
    {
        echo "greet my only be accessed from the command line";
        return;
    }
    echo "Hello, $name" . PHP_EOL;
}
</code></pre>

<p>{% endcodeblock %}</p>

<h3>Setting up the Appointment Reminder</h3>

<p>Let's say we have a system where people can book appointments. We would like to send them a reminder a day in advance that they have an appointment coming up. In this tutorial we will set up a command line script
Let's set up our appointment reminder files. First let's start by building the table.</p>

<p>{% codeblock lang:mysql %}</p>

<p>CREATE TABLE appointments (
  id int auto_increment primary key,
  email varchar(255) not null default '',
  start_time datetime
  is_reminded tinyint(1) not null default 0
);
{% endcodeblock %}</p>

<p>Now, we'll write a model that will perform the two primary data functions we need for this appointment reminder: a way to fetch all appointments on a particular day, and a way to mark them as appointments that have recieved reminders, so that we do not send multiple reminder emails:</p>

<p>{% codeblock application/models/appointment_model.php lang:php %}
&lt;?php
class Appointment_model extends CI_Model
{
  public function get_days_appointments($day)
  {</p>

<pre><code>$day_start = date('Y-m-d 00:00:00', $day);
$day_end = date('Y-m-d 23:59:59', $day);
return $this-&gt;db-&gt;select('*')
    -&gt;from('appointments')
    -&gt;where('start_time &lt;', $day_start)
    -&gt;where('start_time &gt;', $day_end)
    -&gt;get()-&gt;result();
</code></pre>

<p>  }</p>

<p>  public function mark_reminded($appointment_id)
  {</p>

<pre><code>  return $this-&gt;db-&gt;where('id', $appointment_id)-&gt;update('appointments', array('is_reminded' =&gt; 1));
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Now that we can handle all the data transactions through the model. Let's write a controller so we can access this through the command line. In this example, we will put the logic in the <code>index()</code> function, since that is all this controller does. Personally, I like to put all of my command line scripts inside a folder named 'cli' inside of the controllers folder.</p>

<p>{% codeblock application/controllers/cli/reminders.php lang:php %}
&lt;?php
class Reminders extends CI_Controller
{</p>

<p>  public function __construct()
  {</p>

<pre><code>  parent::__construct();
  $this-&gt;load-&gt;library('input');
  $this-&gt;load-&gt;library('email');
  $this-&gt;load-&gt;model('Appointment_model');
</code></pre>

<p>  }
  public function index()
  {</p>

<pre><code>if(!$this-&gt;input-&gt;is_cli_request())
{
    echo "This script can only be accessed via the command line" . PHP_EOL;
    return;
}
$timestamp = strtotime("+1 days");
$appointments = $this-&gt;Appointment_model-&gt;get_days_appointments($timestamp);
if(!empty($appointments))
{
    foreach($appointments as $appointment)
    {
        $this-&gt;email-&gt;set_newline("\r\n");
        $this-&gt;email-&gt;to($appointment-&gt;email);
        $this-&gt;email-&gt;from("youremail@example.com");
        $this-&gt;email-&gt;subject("Appointment Reminder");
        $this-&gt;email-&gt;message("You have an appointment tomorrow");
        $this-&gt;email-&gt;send();
        $this-&gt;Appointment_model-&gt;mark_reminded($appointment-&gt;id);
    }
}
</code></pre>

<p>  }
}</p>

<p>{% endcodeblock %}</p>

<p>whenever this command line script is called, it will set an email to all people who have an appointment the next day. It will also mark there appointments as reminded to insure that we do not send multiple emails to the same person for the same appointment.</p>

<h3>Setting up a Cron Job (Scheduled Task)</h3>

<p>We would like to call this command line script once a day, at 1pm. You can edit the cron jobs your server runs with the following command:</p>

<pre><code>crontab -e
</code></pre>

<p>each line of the crontab file takes 6 arguments, which are, in order:</p>

<ul>
<li>minutes (0 to 59)</li>
<li>hours (0 to 23)</li>
<li>day of month (1 to 31)</li>
<li>month (1 to 12)</li>
<li>day of week (0 - 6)</li>
<li>command (command to be executed)</li>
</ul>


<p>you can use commas to seperate multiple values <em>(so <code>1,3,5</code> in the day of week field will be every Monday, Wednesday, and Friday)</em> , dashes to represent ranges <em>(so <code>09-17</code> in the hour field means every hour on the hour from 9am to 5pm)</em> and * for wildcards. <em>(so * in the hours fields means every hour on the hour)</em></p>

<p>Since we would like this script to run once a day at 1pm, our new entry into the crontab file would look like this:</p>

<pre><code>0 13 * * * php [application_path]/index.php cli/reminders
</code></pre>

<p>And now we can send out appointment reminders once a day. <a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/">This Article</a> Has a lot of good examples for other ways to set up your scheduled tasks.</p>

<p>I also have a small helper file I use in CodeIgniter to make formatting output easier. You can check it out over on Github.</p>

<p><a href="https://github.com/GSto/cli_helper">cli_helper on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Template and Assets in CodeIgniter]]></title>
    <link href="http://glennstovall.com/blog/2012/02/28/setting-up-a-template-and-assets-in-codeigniter/"/>
    <updated>2012-02-28T09:06:00-05:00</updated>
    <id>http://glennstovall.com/blog/2012/02/28/setting-up-a-template-and-assets-in-codeigniter</id>
    <content type="html"><![CDATA[<p>In this article, I'd like to walk you though my first few steps when setting up a new CodeIgniter Project:
 - Setting up a way to render pages in a layout
 - Setting up a way to easily handle assets (CSS &amp; JavaScript files)</p>

<!-- more -->


<h3>Step 1: Creating A Template</h3>

<p>To start, we are going to make two new files, a layout view, and a localized controller. Let's start by creating a <code>layout.php</code> file in <code>views</code>, and add the following:</p>

<div style='clear:both;'></div>


<p>{% codeblock application/views/layout.php lang:html %}
&lt;!doctype html></p>

<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->


<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->


<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html lang="en"> <!--<![endif]-->
<meta charset='UTF-8'>
<meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1'>
<meta name="viewport" content="width=device-width" />
<title>Title Goes Here</title></p>

<!--[if IE 9]>
  <style type="text/css"> .gradient { filter: none;} </style>
<![endif]-->


<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->


<p></head>
<body>
</body>
</html>
{% endcodeblock %}</p>

<p>This is based on the <a href="paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">HTML5 set up from Paul Irish</a>. We'll use this as the basis for all of our pages. Now, to use this, we are going to create a <code>MY_Controller</code> inside of <code>appliction/core/MY_Controller.php</code>, and create a new function that we'll call <code>render</code></p>

<p>{% codeblock application/core/MY_Controller.php lang:php %}</p>

<p>&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');</p>

<p>class MY_Controller extends CI_Controller {<br/>
  protected $layout = 'layout';
  protected function render($content) {</p>

<pre><code>$view_data = array(
    'content' =&gt; $content
  );
$this-&gt;load-&gt;view($this-&gt;layout,$view_data);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>This will allow us to use the layout file to wrap all of our content. We've also stored the layout file as a protected variable of the MY_Controller, so that we can use different layouts for different controllers if we so choose. Now, let's modify the template file to be able to render the content. Change the body tag so that it looks like this:</p>

<p>{% codeblock application/views/layout.php lang:html %}
<body>
  &lt;?= $content; ?>
</body>
{% endcodeblock %}</p>

<p>Now, let's set up an example view and an example controller to see how it works.</p>

<p>{% codeblock application/views/example/index.php lang:html %}
  <h1>Hello, World!</h1>
  <p> Example page using layouts </p>
{% endcodeblock %}</p>

<p>{% codeblock application/controllers/example.php lang:php %}
&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');</p>

<p>class Example extends MY_Controller {<br/>
  public function index() {</p>

<pre><code>$content = $this-&gt;load-&gt;view('example/index',null,true);
$this-&gt;render($content);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<h3>Step 2: Adding the Asset Helper</h3>

<p>To help us manage our CSS, JavaScript, and image files, we are going to add some tools for asset manage. First, let's include this <a href="http://codeigniter.com/wiki/Asset_Helper">Asset Helper</a> In our project, and update our <code>autoload.php</code> file so that it is automatically included. Now we are going to set up the directory structure for this. Here is how to do it from the base of your CodeIgniter project (assuming you are using the standard naming conventions):</p>

<pre><code>mkdir assets
mkdir assets/css
touch assets/css/app.css
mkdir assets/js
touch assets/js/app.js
mkdir assets/images
</code></pre>

<p>Now, we are going to keep a list of all of the standard CSS and JavaScript files inside of our MY_Controller, and pass them along to the layout:</p>

<p>{% codeblock application/core/MY_Controller.php lang:php %}
&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');</p>

<p>class MY_Controller extends CI_Controller {<br/>
  protected $layout = 'layout';
  protected $stylesheets = array(</p>

<pre><code>'app.css'
</code></pre>

<p>  );
  protected $javascripts = array(</p>

<pre><code>'app.js'
</code></pre>

<p>  );</p>

<p>  protected function render($content) {</p>

<pre><code>$view_data = array(
    'content' =&gt; $content,
    'stylesheets' =&gt; $this-&gt;get_stylesheets(),
    'javascripts' =&gt; $this-&gt;get_javascripts()
  );
$this-&gt;load-&gt;view($this-&gt;layout,$view_data);
</code></pre>

<p>  }</p>

<p>  protected function get_stylesheets() {</p>

<pre><code>return $this-&gt;stylesheets;
</code></pre>

<p>  }</p>

<p>  protected function get_javascripts() {</p>

<pre><code>return $this-&gt;javascripts;
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>And now we'll update our template using the <code>css_asset()</code> and <code>js_asset()</code> functions from the helper we included earlier:</p>

<p>{% codeblock application/views/layout.php lang:php %}</p>

<!-- in the <head> .. -->


<p>&lt;? foreach($stylesheets as $stylesheet): ?>
  &lt;?= css_asset($stylesheet); ?>  <br/>
&lt;? endforeach; ?></p>

<!-- right before <body> -->


<p>&lt;? foreach($javascripts as $javascript): ?>
  &lt;?= js_asset($javascript); ?>
&lt;? endforeach; ?>
{% endcodeblock %}</p>

<p>If you view the source, you should see that your <code>app.css</code> and <code>app.js</code> files are now included.</p>

<h3>Step 3: Adding Local Assets</h3>

<p>One of the better ideas Rails 3.0 brought to the table was the idea of the 'asset pipeline', which includes being able to define JavaScript and CSS files that are specific to a particular controller. Now let's set up our CodeIgniter project to be able to behave in a similar manner.</p>

<p>This was my motivation for writing the <code>get_stylesheets()</code> and <code>get_javascripts()</code> functions in the <code>MY_Controller</code> class earlier. since we are going to be changing how we get the arrays, we can now do so without touching the <code>render()</code> function since we have abstracted out the interface in which we get our files.</p>

<p>So let's update those two functions, and add two more protected variables to our <code>MY_Controller</code> file:</p>

<p>{% codeblock application/core/MY_Controller.php lang:php %}
&lt;?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');                                              <br/>
class MY_Controller extends CI_Controller {
  protected $layout = 'layout';
  protected $stylesheets = array(</p>

<pre><code>'app.css'
</code></pre>

<p>  );
  protected $javascripts = array(</p>

<pre><code>'app.js'
</code></pre>

<p>  );
  protected $local_stylesheets = array();
  protected $local_javascripts = array();</p>

<p>  //other parts of the class..</p>

<p>  protected function get_stylesheets() {</p>

<pre><code>return array_merge($this-&gt;stylesheets,$this-&gt;local_stylesheets);
</code></pre>

<p>  }</p>

<p>  protected function get_javascripts() {</p>

<pre><code>return array_merge($this-&gt;javascripts,$this-&gt;local_javascripts);
</code></pre>

<p>  }</p>

<p>}
{% endcodeblock %}</p>

<p>Now we are able to add additional asset files to the <code>local_stylesheets</code> and <code>local_javascripts</code> variables in classes that extend <code>MY_Controller</code>, allowing us to keep our code seperated and more organized. With this and templates, we now have a good system in place to manage the visual aspects of our web application.</p>
]]></content>
  </entry>
  
</feed>
