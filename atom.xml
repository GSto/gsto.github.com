<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Glenn Stovall]]></title>
  <link href="http://gsto.github.com/atom.xml" rel="self"/>
  <link href="http://gsto.github.com/"/>
  <updated>2013-06-30T21:46:36-04:00</updated>
  <id>http://gsto.github.com/</id>
  <author>
    <name><![CDATA[Glenn Stovall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS: an Overview]]></title>
    <link href="http://gsto.github.com/blog/2013/06/27/angularjs-an-overview/"/>
    <updated>2013-06-27T12:33:00-04:00</updated>
    <id>http://gsto.github.com/blog/2013/06/27/angularjs-an-overview</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/angular.png" width="260"></p>

<p>AngularJS is a JavaScript framework made by Google for building complex client-side applications. Angular&#8217;s killer feature is &#8216;directives&#8217; which allow you to extend HTML by creating your own tags and attributes. Angular projects have a somewhat different structure than other JavaScript MVC frameworks, but it can be highly modular and easy to maintain once you understand the structure. Let&#8217;s take a look at the main components of AngularJS and how they work, and why you should strongly consider Angular for your next project.</p>

<!-- more -->


<h3>The Philosophy of AngularJS</h3>

<h4>Data First</h4>

<p>If you are familiar with JavaScript libraries like jQuery, using AngularJS will require a bit of a paradigm shift. AngularJS is like jQuery, but backwards. what I mean by that, is that jQuery is mainly focused on DOM manipulation, and then you update data based on that. When writing Angular, you will mostly be updating data, and the DOM will be updated for you, with very little work on your end.</p>

<h4>Highly Testable</h4>

<p>AngularJS was designed to be testable end-to-end. It uses <strong>Dependency Injection</strong> In many of objects so that parts of it can easily be mocked. It is also designed to encourage you to break the functionality of your application into several smaller, more testable parts.</p>

<h4>Declarative HTML</h4>

<p>Angular is designed to extend HTML to make it the language you need for building complex web applications. Adding your own tags and attributes allows you to write simple HTML tags that do very complex things.</p>

<h3>Data Binding</h3>

<p>Let&#8217;s take a look at a very simple AngularJS app, that uses <strong>two-way data binding</strong>.</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">ng-model=</span><span class="s">&#39;name&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>{{name}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s break this down line by line to explain what is happening:</p>

<ul>
<li><code>&lt;body ng-app&gt;</code> : all Angular code must be wrapper in this directive. This declares that everything within this tag will be treated as an angular application.</li>
<li><code>&lt;input type='text' ng-model='name' /&gt;</code> : This is one part of the data binding. Here we are using another directive, ng-model, to bind the input to a string. Note that in this example we also see that attribute directives can have arguments.</li>
<li><code>&lt;h2&gt;{{name}}&lt;/h2&gt;</code> : Whenever you type into the input box, this h2 tag updates automatically. This is the automatic DOM manipulation I mentioned earlier. We were able to do this without writing a single line of JavaScript.</li>
</ul>


<h3>Modules</h3>

<p><strong>Modules</strong> are used to organize the objects in an AngularJS application. Modules can either be used as as the &#8216;core&#8217; of an application, and contain all of the classes used for it, or they can be used to group several objects that have similar functionality. Let&#8217;s create a module for our application:</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&#39;myApp&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument passed to <code>angular.module</code> is the name of the module. We have passed that name to the <code>ng-app</code> to bind everything contained in that directive to our module. The second argument is an array of other modules your module depends on. This is empty since we currently don&#8217;t have any. Much like directives, AngularJS contains several modules already built that you can include in your projects.</p>

<p>Now that we have a module, we will write our first type of AngularJS object, a <strong>controller</strong>.</p>

<h3>Controllers</h3>

<p>Controllers are tied to particular html elements. They contain data and functions that the html can interact with, and can interact with other service objects, which can handle things such as communicating with the server. Let&#8217;s create a controller and bind it to a div in our application.</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;mainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Default Name&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&#39;myApp&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&#39;mainCtrl&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">ng-model=</span><span class="s">&#39;name&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>{{name}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&#8217;ve used the <code>ng-controller</code> directive to bind our controller function to a div. Controllers get one argument by default which is called <code>$scope</code>. <code>$scope</code> contains all of the data that the html can interact with. When you reload the page, you will notice that the input now starts with the field filled in with &#8216;Default Name&#8217;. This is because we set that variable in the controller, which is called when the page is loaded.</p>

<p>Functions can also applied to scope and then called inside the HTML. Angular contains several directives for handling various events. Let&#8217;s change our example to include a function that we will call with an <code>ng-click</code> directive. We will add a button to save the name we create and later display the list.</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;mainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Default Name&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">people</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">savePerson</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">push</span><span class="p">[</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body</span> <span class="na">ng-app=</span><span class="s">&#39;myApp&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&#39;mainCtrl&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&#39;text&#39;</span> <span class="na">ng-model=</span><span class="s">&#39;name&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&#39;savePerson()&#39;</span><span class="nt">&gt;</span>Save Person<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h2&gt;</span>{{name}}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can save a list of these people. We can use another directive called <code>ng-repeat</code> To output a list of the people we have saved:</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&#39;person in people&#39;</span><span class="nt">&gt;</span>{{person}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have seen how we can manipulate data inside the JavaScript, let&#8217;s look at how we can manipulate the DOM, by creating our own <strong>directives</strong></p>

<h3>Directives</h3>

<p>You have already seen directives in use in several places inside the application. You can also define your own directives as part of your application. Let&#8217;s create an alertable directive that will allow you to set a message to be alerted whenever you click on the element.</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;alertable&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span> <span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attars</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we an add this to our person list:</p>

<figure class='code'><figcaption><span>index.html  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&#39;person in people&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">alertable=</span><span class="s">&#39;{{person}}&#39;</span><span class="nt">&gt;</span>{{person}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, directives return an object that will define the directive. There are several optional arguments that can be passed here, but let&#8217;s look at the two we used here:</p>

<ul>
<li><p><strong>restrict</strong> : This tells your directive what kind of directive it will be. restrict is required and there are four possible arguments that can be passed to it:</p></li>
<li><p><strong>E</strong> : Element. example usage: <code>&lt;my-directive&gt;&lt;/my-directive&gt;</code></p></li>
<li><strong>A</strong> : Attribute. example usage: <code>&lt;div my-directive&gt;&lt;/div&gt;</code></li>
<li><strong>C</strong> : Class. example usage: <code>&lt;div class='my-directive'&gt;&lt;/div&gt;</code></li>
<li><p><strong>M</strong> : Comment. example usage: <code>&lt;!-- directive:my-directive --&gt;</code></p></li>
<li><p><strong>link</strong> : The link function is responsible for adding event listeners and updating the dom.</p></li>
</ul>


<p>You can read about some of the other possible options in the <a href="http://docs.angularjs.org/guide/directive">Angular directive documentation</a>.</p>

<h3>Services</h3>

<p>Services are classes that can either contain business logic or handle data. Now we are going to refactor  our previous example and create a service that can handle the data in our list of people.</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;PersonService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">PersonService</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="nx">PersonService</span><span class="p">.</span><span class="nx">people</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">PersonService</span><span class="p">.</span><span class="nx">addPerson</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">PersonService</span><span class="p">.</span><span class="nx">people</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">PersonService</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll notice that services are created slightly differently than controllers. Controllers are just a function, where services are a function that returns an object. This allows you to add private methods to your service if you would like.</p>

<p>Now we need a way for our controller to have access to the service we just created. Since they are in the same module, this is very easy to do. This also involves one of the more &#8220;magical&#8221; features of Angular. To give the controller access to our service, we just have to add it as an argument to our controller, like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.controller('mainCtrl', function($scope, PersonService){});</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s really surprising is that if you change the order of the arguments to the controller function, <em>it will not change how the controller function operates</em>. So, if we did this instead:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.controller('mainCtrl', function(PersonService, $scope){});</span></code></pre></td></tr></table></div></figure>


<p>Our function would behave in exactly the same way. This is because AngularJS looks at the names of the arguments of a function to decide what to pass to them. Now, you may be concerned that this could break if you were to minify your JavaScript, and you would be right. Luckily, Angular provides an alternate way of declaring functions to prevent issues when minifying your code. It involves passing an array of strings to tell angular what the arguments should be, with the actual function as the last element in the array. So now your controller would look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.controller('mainCtrl', ['$scope', 'PersonService', function($scope, PersonService){}]);</span></code></pre></td></tr></table></div></figure>


<p>When writing services, Angular provides some helpful modules for communicating with the server. Some of the most useful are <a href="">ngHttp</a> and <a href="">ngResource</a>. ngHttp is used to make HTTP requests. ngResource is an extension of ngHttp designed to work exclusively with REST APIs. This is another reason why when you are declaring a service, you are asked for a function that returns an object; We are able to use this function to extend an existing object like ngResource and return it.</p>

<h3>Routing</h3>

<p>Angular also provides support for routing with URLs. Routing is performed by using the <code>config</code> function of the module. Let&#8217;s use this to structure separate pages for our main page, and give each person in our person list a profile page. Here is what the route provider will look like:</p>

<figure class='code'><figcaption><span>app.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/home.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;homePageCtrl&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/person/:id&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;templates/profile.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;profileCtrl&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Filters</h3>

<p>Filters are a smaller, but often useful part of AngularJS. Filters are used to transform data when it is displayed to the user. Like directives, you can build them yourself, and Angular also includes several useful ones built-in. Let&#8217;s look at the following HTML:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;span>Price:&lt;/span> 300</span></code></pre></td></tr></table></div></figure>


<p>Which will look like this in the browser:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Price: 300</span></code></pre></td></tr></table></div></figure>


<p>We can apply a couple filters to this to make it look different, by using the <code>|</code> operator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;span>{{ "Price:" | uppercase }}&lt;/span> {{ "300" | currency }}</span></code></pre></td></tr></table></div></figure>


<p>And our output will now look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PRICE: $300.00</span></code></pre></td></tr></table></div></figure>


<h3>Additional Reading</h3>

<p>I hope you found this helpful, but this is just scratching the surface of what Angular.js is capable of. If you would like to learn more about Angular, here are some resources for further reading:</p>

<ul>
<li><a href="http://docs.angularjs.org/">AngularJS Documentation</a> - official documentation, lots of good examples</li>
<li><a href="http://egghead.io">EggHead.io</a> - several short (usually 4 or 5 minute) videos explaining several particular parts of angular.</li>
<li><a href="http://builtwith.angularjs.org/">BuiltWith AngularJS</a> - examples of applications built with Angular</li>
<li><a href="http://sporto.github.io/blog/2013/04/12/comparison-angular-backbone-can-ember/">A Comparison of Angular, Backbone, CanJS and Ember</a> - a great article comparing AngularJS to some</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reading on wealth and programming]]></title>
    <link href="http://gsto.github.com/blog/2013/06/07/reading-on-wealth-and-programming/"/>
    <updated>2013-06-07T08:10:00-04:00</updated>
    <id>http://gsto.github.com/blog/2013/06/07/reading-on-wealth-and-programming</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/wealth.jpg" width="260"></p>

<p>The world of software development is one that runs on abstractions. Developers are used to working in this world when it comes to software, but when these abstractions start to <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">Leak Out</a> into the real world it can become harder to manage. One of the trickier abstractions is the one between software development and wealth. It is clear that programming provides some sort of value, or else people would not be so eager to pay for it. It is a complex subject, and one I am not equipped to get into in the depth it needs, but instead I wanted to share a couple articles and a book I have read recently that shed some light on the subject.</p>

<!-- more -->


<h3>How To Make Wealth &#8211; Paul Graham</h3>

<p><a href="http://www.paulgraham.com/wealth.html">How To Make  Wealth</a></p>

<p>This is an older essay by <a href="http://paulgraham.com/">Paul Graham</a> , a programmer and venture capitalist who co-founded <a href="http://ycombinator.com/">Y Combinator</a>. Paul is an excellent writer, and in this article he does a great job at explaining how programmers are able to create wealth. He also makes an important distinction: That wealth does not necessarily equal money. Money is the medium of exchange in which wealth is transferred. to paraphrase one of his examples, Linus Torvalds helped create Linux and Git. These tools are free and open-source, and even if Linus didn&#8217;t make a dime off of these, he still created wealth. He compares and contrasts the three major ways a programmer can convert the wealth they generate into money. Programmers can be employees for a company, where as an employee you are getting a share of the wealth you and all your co-workers generate in the form of a salary. They can also be contractors and freelancers, where they can sell their wealth directly. There is also working for a start-up, which has the highest returns, but also the biggest risk. As he puts it, a programmer who can generate $1 million in wealth for a start-up will not get $1 million in return, but they could get a 20% chance at getting $10 million for it. There is more risk, but it is a proposition that does offer a lot of expected value.</p>

<h3>Are Coders Worth It? &#8211; James Somers</h3>

<p><a href="http://www.aeonmagazine.com/living-together/james-somers-web-developer-money/">Are Coders Worth It?</a></p>

<p>This article from Aeon Magazine sheds some light on what working as a web developer is like these days. And he is right, times right now are good for skilled programmers. Building a tech start-up is cheaper than ever before. Before when some value may have been created by the infrastructure your company builds, now all of that is a commodity that can easily be bought for cheap and scaled up as necessary. Instead of having to worry about hiring a system administrator to maintain a large server, you can simply spin up an instance of Heroku. Need to manage payment processing or project management? There is a bevy of tools that can be subscribed to for just tens of dollars a month to solve this problem. Developers are the people that can put all of this together and make something valuable. As James puts it, In this gold rush, developers are the shovel.</p>

<h3>Double Your Freelancing Rate &#8211; Brennan Dunn</h3>

<p><a href="http://doubleyourfreelancingrate.com/">Double Your Freelancing Rate</a></p>

<p>Brennan Dunn is a freelancer who has written an excellent book about increasing the amount of money you can make as a freelancer. He brings up two good points that can help freelancers understand their value. One is that freelancers should focus on the value they provide a company.  It is easy to get caught in the trap of believing that the rate you charge should be based on the amount of work you do, or on the skills you have. However, both of these are just means to an end; It is possible to be skilled, work hard, and create something that is of no value to anyone. By focusing instead on the benefit you provide, it can break down this wall of abstraction between you and the client in regards to wealth, and as a freelancer you can make sure that you are getting paid what you are worth.  The second point he makes is that the value we provide is not just in the products that we produce, but in experience we can provide when working with people. To many people, programming is a black box. Many business owners may not understand what is possible, and what kind of resources are involved in certain types of programming. I once spent 3 days writing something for a company that was later sold for $30,000 to a client.  I&#8217;ve also spent months writing code that probably ended up have a real world value of near zero. Part of being a developer is solving problems, and working with clients to understand what you can do for them that provides the best value. I&#8217;d rather write more code for clients like that first example, and less like the second, and I am sure they would prefer that as well.</p>

<h3>Summary</h3>

<p>Having a greater understanding of how programming creates wealth is a win for everybody. Programmers who understand this can focus their abilities on activities that generate the most wealth, and can find themselves in more favorable positions by understanding how their work relates to this. Business owners who understand this can also look to work with developers who can provide them with the best value. This is why many freelancers charge a higher rate; There is more to being a developer than just cranking out code, it comes with this ability to solve problems and find ways to create value. Many people who look for very cheap development options aren&#8217;t aware of this, and usually end up paying the price in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Use Git]]></title>
    <link href="http://gsto.github.com/blog/2013/03/15/how-i-use-git/"/>
    <updated>2013-03-15T09:35:00-04:00</updated>
    <id>http://gsto.github.com/blog/2013/03/15/how-i-use-git</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/git.png" width="260"></p>

<p><a href="http://git-scm.com/">git</a> is a very powerful and flexible tool.  With this power and flexibility comes a daunting amount of choices to make in how to manage your code with it. Here is the current setup I&#8217;ve used on both personal solo projects and professional jobs with other developers that has worked for me and saved me a lot of headaches.</p>

<!-- more -->


<h3>Setting Up</h3>

<h4>Set up the Initial Repository</h4>

<pre><code>git init
git commit -am 'initial commit'
git tag -a '0.0'
</code></pre>

<p>Simple enough, right? I usually do this once I&#8217;ve installed whatever framework I am using for a project and done whatever configurations are necessary. At this point I&#8217;ll go ahead and set up the <code>.gitignore</code> file based on whatever kind of project I am working on. You&#8217;ll notice I also use tags for keeping track of the version number of the project.</p>

<h4>Create a dev branch</h4>

<pre><code>git checkout -b dev
</code></pre>

<p>Next, I will create the &#8216;dev&#8217; branch. I will treat master as the &#8216;production&#8217; branch. All code will be tested integrated in the dev branch, and only merged with master when the code is ready to be shipped. If you are following and agile development pattern, this will usually be at the end of each sprint. Otherwise, it could once a predetermined set of features has been completed.</p>

<h4>Set up Bitbucket and Heroku Staging Environment</h4>

<pre><code>git remote add origin [Bitbucket repository URL]
git push origin master
git push origin dev
git remote add staging [Heroku repository URL]
git push staging dev:master
</code></pre>

<p>I use <a href="http://www.bitbucket.org">Bitbucket</a> for most private projects. <a href="http://www.github.com">Github</a> has a lot of nice features, and could work just as well here but it&#8217;s hard to compete with the free cost of private repositories over at Bitbucket. Regardless of which service you prefer, the important reason for doing this is that now you have a remote backup of your work if anything happens to your computer. Now I have a backup of my code online that it easily manageable, that comes along with a wiki for documentation and simplistic bug tracking. If I am working with other people, we now have a central point of communication as well. I usually set up a <a href="http://www.heroku.com">Heroku</a> project for a staging server as well. This way I have a way of demoing functionality before it is ready to be shipped. If Heroku doesn&#8217;t work for you (i.e. a PHP project) this can be any server you would like to use to host your code for staging / testing.</p>

<p>At this point, we should have everything we need to get started on a project.</p>

<h3>Developing</h3>

<h4>New Features</h4>

<pre><code>git checkout dev
git checkout -b feature_branch
</code></pre>

<p>_Note: <code>git checkout -b feature_branch</code> is shorthand for <code>git branch feature_branch; git checkout feature_branch</code></p>

<p>How you define a feature is completely up to you and your development practices. It could be a user story, or an issue ticket for example. When possible, I like to keep feature branches small. The reason for feature branches is that this way no feature is dependent on another when merging and deploying code. If you are working on two separate features, and another developer is working on two more, and you were all on the development branch, you would be unable to push parts of it to staging or master without pushing all of it. In git, branching is cheap, and merging is easy. This is one situation where using a lot of smaller branches can be very advantageous.</p>

<p>If you are using a staging server, you can also use it to demo one particular feature:</p>

<pre><code>git push staging feature_branch:master
</code></pre>

<h4>Integrating Features</h4>

<pre><code>git checkout dev
git merge feature_branch 
git branch -d feature_branch
</code></pre>

<p>Once the feature is completed and tested, it is ready to be merged back into the dev branch. At this point, you fix any conflicts that arise, and run any tests you have to make sure that the integration was successful.</p>

<h3>Maintaining</h3>

<h4>Regular Bug Fixes</h4>

<p>I treat bug fixes just like a feature branch. Any bug gets its on branch, and once it is fixed, it is merged back into dev. However. sometimes you may have a bug that is an emergency, and it needs to be fixed on production instantly without going through all the code in the dev branch. What then?</p>

<h4>Hot Fixes</h4>

<pre><code>git checkout master
git checkout -b hotfix_branch
</code></pre>

<p>This is the only time I&#8217;ll branch off of master besides dev, and this should only be reserved for emergencies.  Once the fix is put in, the hot fix is merged into both the master and dev branches. This way dev will have the fix and not accidentally introduce it later, and the live code can be fixed quickly.</p>

<pre><code>git checkout master
git merge hotfix_branch
git tag -a '1.0.1'
git checkout dev
git merge hotfix_branch 
git branch -d hotfix_branch
git push origin dev
git push origin master
</code></pre>

<h3>Shipping</h3>

<h4>Releasing and Update</h4>

<pre><code>git remote add production [production_url]
git checkout master
git merge dev
git tag -a '1.1'
git push production master
</code></pre>

<p>Once you are satisfied with the state of dev and are ready to push it live, dev gets merged into master. Every time code is merged into master, it gets tagged with a version number. I prefer to follow the <a href="http://semver.org">semantic versioning guidelines</a> If a production remote is not added, usually one gets added here, and code is pushed there.</p>

<p>This setup allows you to keep you to work effortlessly in development without interfering with production, and keeps new features and fixes in development decoupled from one another, allowing for efficient development and simple collaboration with other developers.</p>

<p>How do you use git in your work flow? <a href="http://www.reddit.com/r/programming/comments/1alhsf/how_i_use_git/">Discuss on Reddit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminals for Aboslute Beginners Part 4]]></title>
    <link href="http://gsto.github.com/blog/2013/03/04/terminals-for-aboslute-beginners-part-4-searching/"/>
    <updated>2013-03-04T06:51:00-05:00</updated>
    <id>http://gsto.github.com/blog/2013/03/04/terminals-for-aboslute-beginners-part-4-searching</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/terminal.jpg" width="260"></p>

<h3>Searching</h3>

<p>Searching is one of the most important tools in a developers tool belt. In this tutorial we will go over two commands that will make navigating the file structure of your machine easier, find and grep. One will be used to search for files by name, and the other will be used to search the contents of those files.</p>

<!-- more -->


<ul>
<li>Read Part 1 <a href="http://gsto.github.com/blog/2012/02/15/terminals-for-absolute-beginners/">Directories and Commands</a></li>
<li>Read Part 2 <a href="http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2/">Manipulating Files</a></li>
<li>Read Part 3 <a href="http://gsto.github.com/blog/2012/10/30/terminals-for-absolute-beginners-part-3/">File Permissions</a></li>
</ul>


<h4>How to find certain files</h4>

<p>Finding files with a certain name is an easy enough command. It&#8217;s <code>find</code>. The first argument in find is the directory you want to search, and then there are many other flags you can pass afterwards. The most common is <code>-name</code> , followed by the name of a file. for example, let&#8217;s say you need to find a file named <code>lost.dog</code> and you want to search the entire file system. you would type:</p>

<pre><code>find / -name 'lost.dog'
</code></pre>

<p>You could also use <code>./</code> instead of <code>/</code> if you wanted to limit the search to just your current working directory. These queries (not only in find, but in all of theaw examples and many other linux tools) accept wildcards. if you wanted to search for all files with the <code>.dog</code> extension, you could run the command like so:</p>

<pre><code>find / -name *.dog
</code></pre>

<p><code>*</code> means &#8216;anything&#8217; when searching. Besides <code>-name</code>, there are many other useful flags you can use:</p>

<ul>
<li><code>-iname</code> Works the same as -name, but is not case sensitive</li>
<li><code>-type</code>  Search by type. usually &#8216;f&#8217; for file, or &#8216;d&#8217; for directory</li>
<li><code>-perm</code> Search by permissions</li>
<li><code>-size</code> Search by file size.</li>
</ul>


<p>You can combine all of these. Let&#8217;s say for example you want to find all hidden files in the current directory, but exclude hidden directories:</p>

<pre><code>find ./ -type f -name .*
</code></pre>

<h4>How to search text within files</h4>

<p>This is probably the most common search you will have to use, which can search the contents of files. This tool is called <code>grep</code>. It is an acronym for &#8216;General Regular Expression Parser&#8217;. I could write an entire article on grep. In fact, <a href="http://www.amazon.com/Grep-Pocket-Reference-OReilly/dp/0596153600/ref=sr_1_1?ie=UTF8&amp;qid=1362369051&amp;sr=8-1&amp;keywords=grep">entire books</a> have been written on the subject  but here I will just try to give you a brief overview of what grep can do.</p>

<p> The command <code>grep</code> takes two arguments: the query string we are searching for, and the file pattern we will be searching through. The query string is a <a href="http://gsto.github.com/blog/2012/03/06/my-eureka-moment-with-regular-expressions/">regular expression</a>, and the file pattern is the name of a file or directory, or a string with wildcards and other special characters. In a simple example, let&#8217;s say we have a file named <code>hello.rb</code> and we want to find where the line that says &#8220;puts &#8216;hello, world&#8217; is.</p>

<pre><code>grep "puts 'hello, world'" hello.rb
</code></pre>

<p>Now, this search won&#8217;t find anything if the line is slightly different. Let&#8217;s say the line may have , Hello, World! instead. There are two things we can do to make this search less strict: pass the <code>-i</code> flag to make the search case insensitive, and not search for the entire string, only a part of it. We may also not be sure if the string is in <code>hello.rb</code> or some other ruby file, so let&#8217;s search all ruby files in our current working directory:</p>

<pre><code>grep -i "hello, world" *.rb
</code></pre>

<p>This should return more results. In addition to -i, there are several other useful flags with grep:</p>

<ul>
<li><code>-v</code> Inverted match. this will only return files that don&#8217;t match the query provided.</li>
<li><code>-r</code> Recursive. If a directory is specified, will also search all subdirectories</li>
<li><code>-n</code> Print out the line number of where the match was found.</li>
<li><code>-l</code> Print out the filename of where the match was found.</li>
</ul>


<p>All of these can be useful when trying to find a particular piece of text, for example when you need to find patterns or try to find the root of a bug. grep is much more powerful with a good knowledge of regular expressions, however that is beyond the scope of this article and hardly a beginner topic.</p>

<p>By now you&#8217;ve learned the basics of how unix named systems work, and many of the useful programs that are standard. Next time we will look at how to combine some of these with pipes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Tips for More Accurate Estimates]]></title>
    <link href="http://gsto.github.com/blog/2013/02/18/5-tips-for-more-accurate-estimates/"/>
    <updated>2013-02-18T15:11:00-05:00</updated>
    <id>http://gsto.github.com/blog/2013/02/18/5-tips-for-more-accurate-estimates</id>
    <content type="html"><![CDATA[<p>Time estimation is one of the most difficult tasks for developers to do accurately. Programming constantly involves solving never before seen problems and dealing with incomplete information. It can often feel as if someone is asking you &#8216;how long is a piece of string?&#8217; with no further information or tools. And since estimating is often necessary for project planning and billing, it&#8217;s something that programmers cannot avoid,  and can be disastrous if gotten wrong. Here are five tips to help you improve your ability to estimate.</p>

<!--more-->


<h2>1. Make sure you have considered all factors.</h2>

<p>This is probably the most common &#8216;gotcha&#8217; when it comes to estimating times for tasks. Developers will often have a myopic view of the task at hand. If you need to write a WordPress plugin that adds a widget to the sidebar, people will only think about the time it takes to implement that. What they often don&#8217;t consider is time to test and debug their work, time to communicate with the client about specifics, time to document their work, and time that run into a roadblock that can get you stuck for minutes or even hours. Make sure to take these into account when making estimates. My personal rule of thumb is that tasks tend to take ~30% longer than you initially think they will.</p>

<blockquote><p>&#8220;The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.&#8221;[1]
—Tom Cargill, Bell Labs</p></blockquote>

<h2>2. Break Tasks Down.</h2>

<p>personally, I try to never estimate on a task for more than 6 hours. If I think I am facing a large task that is going to take more than that, I am probably facing several smaller tasks in disguise. Breaking down tasks also forces you to further define the task at hand. This could lead to you discovering tasks that you hadn&#8217;t considered, or even possibly realizing that something that seemed daunting isn&#8217;t as time consuming as it first seemed.</p>

<h2>3. Get Clarification.</h2>

<p>Communication is paramount here. Make sure you have   a clear idea of what it is you are estimating on. Ask lots of questions. Try to think of edge cases. This is the one step on this list that requires experience more than anything else. Every developer gets screwed on this more than a few times early in their career. After each project, ask yourself what you wish you knew when you started, and do your best to get that kind of information at the start of your next project. This is a situation where an ounce of prevention is worth pounds of cure.</p>

<h2>4.If you&#8217;re Unsure, Guess High:</h2>

<p>Even when you communicate well with everyone involved in the project and gather as much information as you can, sometimes you still cannot have the clearest picture of what exactly it is that you are estimating. Maybe you are using a new technology, or are working in a new field that you know is going to require hours of studying up on HIPAA rules to make sure your software is compliant. In these cases, it is usually best to be a pessimist, and make larger estimates. You will have to take time to do research, and since you are in uncharted waters, you won&#8217;t be as productive as you are in areas where you have experience.</p>

<h2>5. Track your Time.</h2>

<p>The secret to improving your performance at any skill is to track your progress, take a hard look in the mirror, and see where you do well and where you can improve. Estimating is no different. Make sure you are tracking your time against what you said and how you performed. Once you have data you will start to see trends: maybe you always over estimate, maybe you are always under. Maybe it depends on what kind of work you do. Once you&#8217;ve done this, you can start to adjust your estimates until you are more accurate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Cron Jobs and Command Line Scripts in CodeIgniter]]></title>
    <link href="http://gsto.github.com/blog/2013/01/07/writing-cron-jobs-and-command-line-scripts-in-codeigniter/"/>
    <updated>2013-01-07T23:58:00-05:00</updated>
    <id>http://gsto.github.com/blog/2013/01/07/writing-cron-jobs-and-command-line-scripts-in-codeigniter</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/codeigniter.jpg" width="260">
Building a command line interface into your application can be a way to add extra utility to you application. Adding cron jobs (a.k.a. scheduled tasks) to your CodeIgniter application can provide extra utility. In this article we&#8217;ll show you how to set up both in a CodeIgniter application by writing a simple appointment reminder, which will remind people if they have an appointment scheduled a day in advance.</p>

<!-- more -->


<h3>Running Code Via The Command Line</h3>

<p>All CodeIgniter controller methods can be accessed via the command line. Let&#8217;s start with a simple controller:</p>

<figure class='code'><figcaption><span>application/controllers/hello.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hello</span> <span class="k">extends</span> <span class="nx">CI_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;Hello, World&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">greet</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="k">echo</span> <span class="s2">&quot;Hello, </span><span class="si">$name</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the root application forlder, to call the index function we can do the following:</p>

<pre><code>php index.php hello
</code></pre>

<p>By passing the name of the controller to <code>index.php</code> , we are able to invoke the index method of the controller. If we want to invoke other methods, we can pass them as the next aguments. any arguments proceeding those will be passed as arguments to the method we are calling. So, to get the output of &#8220;Hello, Glenn&#8221; from this controller, we would run the following:</p>

<pre><code>php index.php hello greet Glenn
</code></pre>

<h3>Detecting command line requests</h3>

<p>You may want to write controller methods that behave differently based on wether or not they are accessed via the command line. you can do this by using the <a href="http://ellislab.com/codeigniter/user-guide/libraries/input.html">input library</a>, which has a function called <code>is_cli_request()</code> to detect if a request to a controller is from the command line or not. Here is an example if you want to make a method only accesible via command line:</p>

<figure class='code'><figcaption><span>application/controllers/hello.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">  </span><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">greet</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">is_cli_request</span><span class="p">())</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">echo</span> <span class="s2">&quot;greet my only be accessed from the command line&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;Hello, </span><span class="si">$name</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Setting up the Appointment Reminder</h3>

<p>Let&#8217;s say we have a system where people can book appointments. We would like to send them a reminder a day in advance that they have an appointment coming up. In this tutorial we will set up a command line script
Let&#8217;s set up our appointment reminder files. First let&#8217;s start by building the table.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nf">appointments</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="kt">int</span> <span class="kp">auto_increment</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
</span><span class='line'>  <span class="n">email</span> <span class="kt">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">default</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">start_time</span> <span class="kt">datetime</span>
</span><span class='line'>  <span class="n">is_reminded</span> <span class="kt">tinyint</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">default</span> <span class="mi">0</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, we&#8217;ll write a model that will perform the two primary data functions we need for this appointment reminder: a way to fetch all appointments on a particular day, and a way to mark them as appointments that have recieved reminders, so that we do not send multiple reminder emails:</p>

<figure class='code'><figcaption><span>application/models/appointment_model.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Appointment_model</span> <span class="k">extends</span> <span class="nx">CI_Model</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">get_days_appointments</span><span class="p">(</span><span class="nv">$day</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$day_start</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d 00:00:00&#39;</span><span class="p">,</span> <span class="nv">$day</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$day_end</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d 23:59:59&#39;</span><span class="p">,</span> <span class="nv">$day</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;appointments&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;start_time &lt;&#39;</span><span class="p">,</span> <span class="nv">$day_start</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;start_time &gt;&#39;</span><span class="p">,</span> <span class="nv">$day_end</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="na">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">result</span><span class="p">();</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">mark_reminded</span><span class="p">(</span><span class="nv">$appointment_id</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="nv">$appointment_id</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">update</span><span class="p">(</span><span class="s1">&#39;appointments&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;is_reminded&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we can handle all the data transactions through the model. Let&#8217;s write a controller so we can access this through the command line. In this example, we will put the logic in the <code>index()</code> function, since that is all this controller does. Personally, I like to put all of my command line scripts inside a folder named &#8216;cli&#8217; inside of the controllers folder.</p>

<figure class='code'><figcaption><span>application/controllers/cli/reminders.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Reminders</span> <span class="k">extends</span> <span class="nx">CI_Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">library</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">library</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">model</span><span class="p">(</span><span class="s1">&#39;Appointment_model&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">input</span><span class="o">-&gt;</span><span class="na">is_cli_request</span><span class="p">())</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;This script can only be accessed via the command line&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nv">$timestamp</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s2">&quot;+1 days&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$appointments</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Appointment_model</span><span class="o">-&gt;</span><span class="na">get_days_appointments</span><span class="p">(</span><span class="nv">$timestamp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$appointments</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">foreach</span><span class="p">(</span><span class="nv">$appointments</span> <span class="k">as</span> <span class="nv">$appointment</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">set_newline</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">to</span><span class="p">(</span><span class="nv">$appointment</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s2">&quot;youremail@example.com&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">(</span><span class="s2">&quot;Appointment Reminder&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">message</span><span class="p">(</span><span class="s2">&quot;You have an appointment tomorrow&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">email</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Appointment_model</span><span class="o">-&gt;</span><span class="na">mark_reminded</span><span class="p">(</span><span class="nv">$appointment</span><span class="o">-&gt;</span><span class="na">id</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>whenever this command line script is called, it will set an email to all people who have an appointment the next day. It will also mark there appointments as reminded to insure that we do not send multiple emails to the same person for the same appointment.</p>

<h3>Setting up a Cron Job (Scheduled Task)</h3>

<p>We would like to call this command line script once a day, at 1pm. You can edit the cron jobs your server runs with the following command:</p>

<pre><code>crontab -e
</code></pre>

<p>each line of the crontab file takes 6 arguments, which are, in order:</p>

<ul>
<li>minutes (0 to 59)</li>
<li>hours (0 to 23)</li>
<li>day of month (1 to 31)</li>
<li>month (1 to 12)</li>
<li>day of week (0 - 6)</li>
<li>command (command to be executed)</li>
</ul>


<p>you can use commas to seperate multiple values <em>(so <code>1,3,5</code> in the day of week field will be every Monday, Wednesday, and Friday)</em> , dashes to represent ranges <em>(so <code>09-17</code> in the hour field means every hour on the hour from 9am to 5pm)</em> and * for wildcards. <em>(so * in the hours fields means every hour on the hour)</em></p>

<p>Since we would like this script to run once a day at 1pm, our new entry into the crontab file would look like this:</p>

<pre><code>0 13 * * * php [application_path]/index.php cli/reminders
</code></pre>

<p>And now we can send out appointment reminders once a day. <a href="http://www.thegeekstuff.com/2009/06/15-practical-crontab-examples/">This Article</a> Has a lot of good examples for other ways to set up your scheduled tasks.</p>

<p>I also have a small helper file I use in CodeIgniter to make formatting output easier. You can check it out over on Github.</p>

<p><a href="https://github.com/GSto/cli_helper">cli_helper on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminals for Absolute Beginners: Part 3]]></title>
    <link href="http://gsto.github.com/blog/2012/10/30/terminals-for-absolute-beginners-part-3/"/>
    <updated>2012-10-30T15:03:00-04:00</updated>
    <id>http://gsto.github.com/blog/2012/10/30/terminals-for-absolute-beginners-part-3</id>
    <content type="html"><![CDATA[<h3>File Permissions</h3>

<p><img class="left" src="http://gsto.github.com/images/articles/terminal.jpg" width="260"></p>

<p> In this article, we&#8217;ll take a look at how file permissions works. We&#8217;ll cover how users, groups, and file permissions work in a UNIX-based system, and how they can be used to make using the terminal more secure.</p>

<p> <!-- more --></p>

<ul>
<li>Read Part 1 <a href="http://gsto.github.com/blog/2012/02/15/terminals-for-absolute-beginners/">Directories and Commands</a></li>
<li>Read Part 2 <a href="http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2/">Manipulating Files</a></li>
</ul>


<h4>Users and Groups</h4>

<h4>Understanding Permissions</h4>

<p> Let&#8217;s begin by taking a second look at an example from lesson 1, the output on the command line when we ran the command <code>ls -la</code>:</p>

<pre><code>drwxr-xr-x 70 grp   glenn    4096 2012-02-15 09:35 .
drwxr-xr-x  3 root  root     4096 2011-03-15 16:55 ..
drwxr-xr-x  2 grp   glenn    4096 2012-02-07 09:21 Pictures
drwxr-xr-x  2 grp   glenn    4096 2011-08-23 15:29 Public
drwxr-xr-x  5 grp   glenn    4096 2011-09-28 13:30 Rails
drwxr-xr-x  6 grp   glenn    4096 2011-11-08 16:35 Repositories
drwxr-xr-x 12 grp   glenn    4096 2012-01-15 17:09 Server
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Templates
drwxrwxr-x  2 grp   glenn    4096 2011-08-11 08:46 Ubuntu One
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Videos
</code></pre>

<p>Now, what is of interest to us here is the first column. this is the list of <em>permissions</em> on a file or directory. if the permission is present, the letter is shown. if it is not, then there is a hyphen. so a directory with all permissions (anyone can do anything to it) would look like this:</p>

<pre><code>drwxrwxrwx
</code></pre>

<p>the first letter is actually not a permission, but a flag telling us what kind of file it is, most commonly <code>d</code> for a directory and <code>-</code> for a regular file. Next you will notice that there is a repeating series of 3 letters: r, w, and x. these are short for <strong>R</strong>ead, <strong>W</strong>rite, and e<strong>X</strong>ecute. The first three letters refer to the permissions of the user that owns the file. The second three letters refer to the permissions of any users in the group that owns the file. The third set of letters repesent the permissions of all other users (these are commonly called <em>world permissions</em> or <em>other permissions</em>). So let&#8217;s look at a couple of examples and see what they mean:</p>

<p><code>drwxr-xr-x</code> : The owner may read, write or execute this directory; everyone else may only read or execute it.</p>

<p><code>-rw-r-----</code> : The owner may read or write to the file; people in the group have read-only access; no one else can do anything with it, and no one may execute it.</p>

<p><code>-rwxrwxrwx</code> : Anyone can do anything to this file.</p>

<h4>Octal Permissions</h4>

<p>Permissions can also be represented numerically. These are called <em>Octal Permissions</em>, as they are represented in base 8. In octal permissions, a 1 represents permissions to execute, 2 represents permissions to write, and 4 represent permissions to read. Since all sums of these numbers are unique, we can now represent the rights of any user or group with one digit between 0 and 7:</p>

<pre><code>| Number | Permissions |
------------------------
| 0      | ---         |
| 1      | --x         |
| 2      | -w-         |
| 3      | -wx         |
| 4      | r--         |
| 5      | r-x         |
| 6      | rw-         |
| 7      | rwx         |
------------------------
</code></pre>

<p>Now, we can use three digits to represent the permissions of a file. In a similar manner to above, the first number represents the user&#8217;s rights, the second number the groups, and the third represents the world permissions. Our previous examples can be written as such:</p>

<pre><code>drwxr-xr-x  :   755
-rw-r-----  :   640
-rwxrwxrwx  :   777
</code></pre>

<h4>Manipulating Permissions</h4>

<p>If we want to change the permissions of a file, there are three commands we can use. The first is called <code>chmod</code> and is used for manipulating the file permissions. The arguments for chmod are an octal number to set the new file permissions, and the name of a file. you can also use the <code>-R</code> flag if you want to recursively change all the permissions of files in a directory. Example:</p>

<pre><code>chmod 777 file_name.txt
</code></pre>

<p>The second is <code>chown</code> , which is short for &#8220;change owner&#8221;. It is used to change ownership of a file. It takes arguments in a similar fashion to chmod, but instead of an octal number, it takes a username as an argument. Example:</p>

<pre><code>chown glenn file_name.txt
</code></pre>

<p>The third is <code>chgrp</code>, which is short for &#8220;change group&#8221;. Again, this command works in a similar fashion to chown, except that this command changes the group ownership of a file instead of the user. Example:</p>

<pre><code>chgrp psacln file_name.txt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to add a contact form to octopress]]></title>
    <link href="http://gsto.github.com/blog/2012/07/04/how-to-add-a-contact-form-to-octopress/"/>
    <updated>2012-07-04T11:43:00-04:00</updated>
    <id>http://gsto.github.com/blog/2012/07/04/how-to-add-a-contact-form-to-octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/wufoo.png">
While Octopress is a nice blogging platform, using static generated pages can lead to being unable to have some of the features of other blogging platforms. One of the most common missed features is being able to have a contact us page.  In this tutorial I&#8217;ll show you how to add a contact form to octopress by using <a href="http://www.wufoo.com">Wufoo</a>.</p>

<!-- more -->


<p><a href="http://www.wufoo.com">Wufoo</a> Is an online form generator that allows you to create and manage forms, and then include them on your pages via JavaScript. Once you&#8217;ve logged in, start a new form, and add the fields you want. For a free account, you can have up to 10 fields, and 3 forms, this should be plenty for a simple contact form. There are also theming options so that the look of the form will better match your site. Once the form is set up, you can also set up notification to an email account and / or SMS, so that you will recieve the messages.</p>

<p>Now that you&#8217;ve created your form, it&#8217;s time to create our new contact page. Go to the root directory of your Octopress checkout and run the following command:</p>

<pre><code>rake new_page['contact']
</code></pre>

<p>This should create a new page file located at <code>/source/contact/index.markdown</code> . Now in Wufoo, click the &#8216;code&#8217; button on your newly created form, then, &#8216;embed form code&#8217; and get the JavaScript version. Go to your newly created page and paste the code. I&#8217;d also recommend removing the date from the page file and settings comments and sharing both to false.</p>

<p>Once that is done, you&#8217;ll also probably want to add it to the navigation. You can add pages to the navigation by editing the file located in <code>source/_includes/custom/navigation.html</code> and adding the following line inside of the <code>&lt;ul&gt;</code> tag:</p>

<pre><code>  &lt;li&gt;&lt;a href="http://gsto.github.com/contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p>once this is done, all you have to do is regenrate your page files and deploy:</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>and you&#8217;re done! You can see an exmaple of this turns out on <a href="http://www.glennstovall.com/contact">My Contact Page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rapid Development with Node.js and CoffeeScript]]></title>
    <link href="http://gsto.github.com/blog/2012/05/07/rapid-development-with-node-dot-js-and-coffeescript/"/>
    <updated>2012-05-07T21:57:00-04:00</updated>
    <id>http://gsto.github.com/blog/2012/05/07/rapid-development-with-node-dot-js-and-coffeescript</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/coffeescript.jpg">
Node.js and CoffeeScript have been all the rage in the web development community as of late. In this tutorial, I&#8217;ll be walking though how to set up your development environment to quickly write &amp; test Node.js apps completly in CoffeeScript, and have your development app update automatically without having to compile CoffeeScript <em>or</em> restart your Node.js server.</p>

<!-- more -->


<h3>Step 1: Installing CoffeeScript</h3>

<p>like most other Node.js packages, installing coffeescript is easy:</p>

<pre><code>npm install coffee-script
</code></pre>

<p>Now that we have CoffeeScript installed, we can write a basic &#8216;hello world&#8217; server is CoffeeScript. If you aren&#8217;t familiar with the CoffeeScript syntax, you can refer to the (CoffeeScript Documentation)[http://coffeescript.org/]. Write the following to a <code>hello.coffee</code> file:</p>

<figure class='code'><figcaption><span>hello.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">require</span> <span class="nv">http = </span><span class="s1">&#39;http&#39;</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span> <span class="nf">(req, res) -&gt;</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span> <span class="mi">200</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span> <span class="s1">&#39;Hello, World!&#39;</span>
</span><span class='line'><span class="p">.</span><span class="nx">listen</span> <span class="mi">4000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 2: Compilation</h3>

<p>CoffeeScript files can&#8217;t be executed directly by node, they have to be compiled to JavaScript first. We can run the following command to compile our <code>hello.coffee</code> file:</p>

<pre><code>coffee --compile hello.coffee
</code></pre>

<p>This will generate a <code>hello.js</code> file. now we can run <code>node hello.js</code> and see our message at localhost:4000. Here is the resulting compiled JavaScript:</p>

<figure class='code'><figcaption><span>hello.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">http</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Another Message!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting JavaScript is more verbose than what we wrote originally, but it is still very easy to see how the CoffeeScript maps to the resulting code. Unfortunately this constant compilation isn&#8217;t very rapid, now is it? Let&#8217;s look at how we can streamline this process.</p>

<h3>Step 3: Automation</h3>

<p>The CoffeeScript compiler has a <code>--watch</code> option, which we can use to tell it to automatically compile any <code>.coffee</code> file whenever there is a change. Run the following command, and set it to a background process:</p>

<pre><code>coffee --compile --watch *.coffee
</code></pre>

<p>That will take care of the compilation issue. However, you will still have to wait until everything compiles, and then restart your server, right? Wrong! Now we are going to install a second package, called (Nodemon)[http://remysharp.com/2010/10/12/nodejs-rapid-development-nodemon/] which will listen for changes to files, and automatically restart the Node.js server whenver one is detected. Start by installing the package:</p>

<pre><code>npm install nodemon
</code></pre>

<p>Now, you&#8217;ll want to create a file named <code>nodemon-ignore</code> in your app&#8217;s main directory, and add an exception for .coffee files:</p>

<figure class='code'><figcaption><span>nodemon-ignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#creates an exception for .coffee files
</span><span class='line'>*.coffee
</span></code></pre></td></tr></table></div></figure>


<p>This way, you won&#8217;t have any conflicts with the CoffeeScript compiler.  When the files compile, it will cause the .js files to change, but the server won&#8217;t restart before those files are ready. When you are ready to begin, run the following command:</p>

<pre><code>nodemon hello.js
</code></pre>

<p>Nodemon will listen to changes to all of your non-CoffeeScript files, and automatically restart the server whenever it detects a change. And now you are able to write your node apps in CoffeeScript, and not have to worry about compiling or server restarts, enabling you to write and develop more quickly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminals for Absolute Beginners: Part 2]]></title>
    <link href="http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2/"/>
    <updated>2012-03-07T08:14:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/03/07/terminals-for-absolute-beginners-part-2</id>
    <content type="html"><![CDATA[<h3>Manipulating Files</h3>

<p><img class="left" src="http://gsto.github.com/images/articles/terminal.jpg" width="260"></p>

<ul>
<li>Read Part 1 <a href="blog/2012/02/15/terminals-for-absolute-beginners/">Here</a></li>
</ul>


<p>Now that we have learned the basics of navigating the terminal, lets start looking at how to we affect the file system we&#8217;re working in. In this tutorial, we&#8217;ll cover the following: creating and deleting directories, copying and moving files and directories, and creating and deleting files.</p>

<p> <!-- more --></p>

<p> ###Creating and Deleting Directories</p>

<p> Wherever you left off in the last lesson, let&#8217;s start by going back to home directory, and working from there. Remember that we can do this by running the command <code>cd ~</code>. Now, since we will be manipulating the file system in this tutortial, let&#8217;s create a new directory that we can work in. You can do this by using the <code>mkdir</code> command. mkdir is short for &#8220;make directory&#8221;. just type mkdir and the name of the folder you would like to create. For this example, we&#8217;ll call it &#8216;terminal-tutorial&#8217;</p>

<pre><code>mkdir terminal-tutorial
ls
</code></pre>

<p>When you run <code>ls</code>, you&#8217;ll see that a new directory has been created. <code>mkdir</code> defaults to creating the directory inside the directory you are currently located. if you define a path, it will created the directory there. For example, lets make a directory inside of our terminal-tutorial directory, and then navigate there.</p>

<pre><code>mkdir terminal-tutorial/to-delete
cd terminal-tutorial
ls
</code></pre>

<p>You should see just the to-delete directory. If you tried to create a directory in a directory that did not exist, you would get an error. You can create nested directories at once by using the <code>-p</code> option, Like so:</p>

<pre><code>mkdir -p multiple/subdirectory/example
</code></pre>

<p>creates 3 new directories with those paths. Now lets says you need to get rid of a directory. For this we can use the <code>rmdir</code> command, which is short for &#8216;remove directory&#8217;. Lets get rid of that pesky <code>to-delete</code> folder we made earlier, and the multiple directory example</p>

<pre><code>rmdir to-delete
rmdir multiple
rmdir: failed to remove `multiple': Directory not empty
</code></pre>

<p>You&#8217;ll see that you get the following error message since <code>multiple</code> is not empty. <code>rmdir</code> can only remove empty directories.  Later in this artice we will discuss how can remove entire directories of files</p>

<h3>Creating and Deleting Files</h3>

<p>Now we can start creating and deleting files as well as directories. Let&#8217;s start with the <code>touch</code> command. <code>touch</code> is to files what <code>mkdir</code> is to directories. so let&#8217;s create a file:</p>

<pre><code>touch to-delete
ls
</code></pre>

<p>This creates an empty file named <code>to-delete</code>. To actually delete this file, we use the <code>rm</code> command, which is short for remove:</p>

<pre><code>rm to-delete
</code></pre>

<p>rm can also be used on directories, by using the <code>-r</code> option, which is short for recursive. This will also remove all the contents inside of a directory.  Occasionally you may get a prompt asking if you are sure you want to delete something. You can get rid of this with the <code>-f</code> option. You can use this to get rid of the <code>multiple</code> directory you created earlier</p>

<pre><code>rm -rf multiple
</code></pre>

<p>If you want to open and edit text files, you will need to get accquainted with a good text editor. <a href="http://www.vim.org/">Vim</a> and <a href="http://www.gnu.org/software/emacs/">Emacs</a> Are the two most popular, but both are very complex and a whole series of tutorials could be written on either one.</p>

<p><strong>WARNING</strong></p>

<p>It is a common joke on the internet to try to get people to run the command <code>rm -rf /</code> in the terminal. <code>/</code> refers to the base directory of your entire filesystem, so <code>rm -rf /</code> basically translates into &#8220;delete my everything forever, and don&#8217;t ask for my permission&#8221;. It is a <em>seriously</em> dangerous command to run, and now you know why.</p>

<h3>Copying And Moving Files and Directories</h3>

<p>Let&#8217;s start by creating a couple more directories for this section:</p>

<pre><code>mkdir cars
mkdir vechicles
</code></pre>

<p>You may have decided that you made a mistake, and the <code>cars</code> directory should be inside of the <code>vehicles</code> directory. For situations like these, we have the <code>mv</code> command, which is short for move:</p>

<pre><code>mv cars vechicles/cars
</code></pre>

<p>The first option of the <code>mv</code> command is the directory you would like to move, the second argument being where you would like it to go. Since the names do not nessicarily have to match, <code>mv</code> also acts as a &#8216;rename&#8217; operation for files and directories. If you want to <em>guarantee</em> the names match (and save you some typing), you can replace the final name of the file/directory with a <code>.</code> character, so these two commands are equivalent:</p>

<pre><code>mv cars vehicles/cars
mv cars vehicles/.
</code></pre>

<p>If you wanted to maintain the original <code>cars</code> directory and just put a copy of it in the <code>vehicles</code> directory, then you can do that wih the <code>cp</code> command, which is short for &#8220;copy&#8221;.  Much like <code>rm</code>, <code>cp</code> works with both files and directories, but requires a <code>-r</code> for directories. The structure of the arguments is the same as <code>mv</code> though. So copying <code>cars</code> would have looked like this:</p>

<pre><code>cp -r cars vehicles/.
</code></pre>

<p>Note that the <code>.</code> syntax to keep the same name still works here as well.</p>

<h3>Protip: Tab Completion</h3>

<p>All of this typing on the command line can get tiresome. One of the best tricks to learn to cut down on the amount of keystrokes it takes to type commands is to learn about and get used to frequently using tab completion. If you type the first few letters of a directory or file name and hit tab, the shell will complete it for you! You must type enough characters for it to be unique. If not, pressing tab twice on most shells will show you all the directories and files that match the start of the name you typed. so for example, if you typed this:</p>

<pre><code>mkdir terminal-tutorial
cd te   
</code></pre>

<p>and this pressed the tab button, the terminal should automatically fill out:</p>

<pre><code>cd terminal-tutorial
</code></pre>

<p>Now we have a good set of tools for working with and manipulating the file system. Next time we&#8217;ll take a look at users, groups, and the permissions system that UNIX is based on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Eureka Moment With Regular Expressions]]></title>
    <link href="http://gsto.github.com/blog/2012/03/06/my-eureka-moment-with-regular-expressions/"/>
    <updated>2012-03-06T13:49:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/03/06/my-eureka-moment-with-regular-expressions</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/my_eureka_moment.jpg">
Regular expressions are a tough cookie for most programmers to figure out. They are <em>terrifying</em> to look at with their daunting syntax. There is also nothing quite like regular expressions anywhere in programming. programmers may learn to hack together basic regex expressions, or how to cut and paste some they find online for their needs, but it can be tricky to get a real grasp of the concept. Here I&#8217;d like to explain the line of thinking that finally led to me grokking regex.</p>

<!-- more -->


<p>For reference, I&#8217;ll be using the PERL-style regular expression syntax used by languages like PHP. Here&#8217;s a <a href="http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/">Regular Expressions Cheat Sheet</a> That I&#8217;ll be referencing throughout this article, and it is a great resource to keep around.</p>

<h2>Regular Expressions: A Language Unto Itself</h2>

<p>The tricky thing about regular expressions is that it is its own language within a programming language. It has its own collection of symbols and syntax. Those long, scary strings that regexes are made up of are collections of these <em>symbols</em> and are used to make the <em>pattern</em> you want to match. Think of a regular expression as a <em>sentence</em>, and each one of the symbols as a <em>word</em>.</p>

<h2>Writing &#8220;Words&#8221; in Regular Expressions</h2>

<p>Most of the words of your regular expression are going to be made of a few different language constructs:</p>

<ul>
<li><strong>Ranges</strong> : defining a set of characters that can match. Common examples are <code>[A-Z]</code>, which means all capital letters, <code>[0-9]</code> or which means all digits. These can be combined as well. A common on is <code>[A-Za-z0-9-_]</code> which would match all letters, numbers, hyphens, and underscores.</li>
<li><strong>Character Classes</strong> : similar to ranges. <code>\s</code> means &#8216;any white space character&#8217;, where <code>\S</code> means &#8216;any non-white space character&#8217;.</li>
<li><strong>Metacharacters</strong> : characters that have thier own special meaning, the most common being the pipe <code>|</code> character, which means &#8216;or&#8217; similar to <code>||</code> in most programming languages. A subset of metacharacters is <em>anchors</em>, where can denote the beginning of a string (<code>^</code>) or the end of a string (<code>$</code>).</li>
<li><strong>Quantifiers</strong> : quantifiers are a kind of &#8216;modifier&#8217; to the above patterns. These let you tell the pattern how many of the previous pattern to look for. The common ones are: <code>*</code> for 0 or more, <code>+</code> for 1 or more, and <code>?</code> for 0 or 1. You can also explicity state an amount with something like <code>{5}</code> for 5 characters, or a range, such as <code>{3-6}</code>, which matches anywhere between three and six characters.</li>
</ul>


<h2>Building Patterns with Words</h2>

<p>Let&#8217;s look at the following example problem:</p>

<pre><code>we have a system that has to match social security numbers. 
They can look like any of the following:

123-45-6789
123/45/6789
123456789
</code></pre>

<p>so, now that we have the set of patterns we want to match, we can start building up smaller words to match each part of the pattern. Writing regular expressions is similar to writing functions or classes: you start by breaking down the problem, figuring out smaller parts of it, and then start working on combining these smaller solutions into a large one. So let&#8217;s start by writing out our pattern in plain English:</p>

<ul>
<li>We have the start of the string,</li>
<li>then three digits,</li>
<li>then either a hyphen, forward slash, or neither,</li>
<li>then two digits,</li>
<li>then either a hyphen, forward slash, or neither,</li>
<li>then four digits,</li>
<li>and that is the end of the string.</li>
</ul>


<p>So, let&#8217;s look at this step by step:</p>

<ul>
<li><strong>We have the start of the string</strong> : this is where we start with one of the anchors we mentioned earlier, <code>^</code>.</li>
<li><strong>Three Digits</strong> : We discussed the range of digits earlier (<code>[0-9]</code>), but that only matches a single digit. To match exactly 3, we will need a quantifier as well. So this word can be written as <code>[0-9]{3}</code>.</li>
<li><strong>Either a hyphen, forward slash, or neither</strong> : this is going to take another quantifier, but which one? It helps if we rephrase this statement a bit, and think of it as this: &#8220;exactly 0 or 1 hyphen or forward slash&#8221;. Now we can see that we need the <code>?</code> quantifier. We also see that we&#8217;ll need to use an &#8216;or&#8217; for this statement. For statements like this, you can wrap this part of the expression in parenthesis so that its clear whats going on. The answer here is <code>(-|/)?</code>. Declaring parts of a regular expression inside of parenthesis like this is called defining a <em>sub-pattern</em></li>
<li><strong>Two Digits</strong> : similar to above: <code>[0-9]{2}</code>.</li>
<li><strong>Either a hyphen, forward slash, or neither</strong> : same as above: <code>(-|/)?</code>.</li>
<li><strong>Four Digits</strong> : similar to above: <code>[0-9]{4}</code>.</li>
<li><strong>End of the String</strong> : another anchor, the <code>$</code> one this time.</li>
</ul>


<p>So, now let&#8217;s put that all together, and we have a full regular expression:</p>

<p><code>^[0-9]{3}(-|/)?[0-9]{2}(-|/)?[0-9]{4}$</code></p>

<p>Tada! Now that you can see how the regular expressions is really just a bunch of small parts that fit together, hopefully you can figure out how to both write your own regular expressions, and read other ones you come across.</p>

<p>This is just the tip of the regex iceberg though. There is a whole lot more you can do with it that is much more than the span of this article. Play around with them, refer back to the cheat sheet, and see what you can come up with.</p>

<p><strong>Edit</strong></p>

<p>I realized there was a small problem with the regular expression above. While this work for most of our cases, there is the scenario of getting a number formatted like so: <code>123-45/6789</code> which the pattern would match, even though it is not in a valid format. I asked about this on <a href="http://stackoverflow.com/questions/9624081/matching-delimiters-with-regular-expressions/9624128">Stack Overflow</a> And learned about using <em>back references</em> for situations like this. you can use the syntax <code>\1</code> where 1 is the number of the sub pattern you want to reference. By doing so, you can make sure that the second delimiter matches the first. So our regular expression would now look like this:</p>

<p><code>^[0-9]{3}(-|/)?[0-9]{2}\1?[0-9]{4}$</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a Template and Assets in CodeIgniter]]></title>
    <link href="http://gsto.github.com/blog/2012/02/28/setting-up-a-template-and-assets-in-codeigniter/"/>
    <updated>2012-02-28T09:06:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/02/28/setting-up-a-template-and-assets-in-codeigniter</id>
    <content type="html"><![CDATA[<p><img class="left" src="images/articles/codeigniter.jpg" width="260">
In this article, I&#8217;d like to walk you though my first few steps when setting up a new CodeIgniter Project:
 - Setting up a way to render pages in a layout
 - Setting up a way to easily handle assets (CSS &amp; JavaScript files)</p>

<!-- more -->


<h3>Step 1: Creating A Template</h3>

<p>To start, we are going to make two new files, a layout view, and a localized controller. Let&#8217;s start by creating a <code>layout.php</code> file in <code>views</code>, and add the following:</p>

<figure class='code'><figcaption><span>application/views/layout.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lt IE 7]&gt; &lt;html class=&quot;no-js lt-ie9 lt-ie8 lt-ie7&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if IE 7]&gt;    &lt;html class=&quot;no-js lt-ie9 lt-ie8&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if IE 8]&gt;    &lt;html class=&quot;no-js lt-ie9&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if gt IE 8]&gt;&lt;!--&gt;</span> <span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span> <span class="c">&lt;!--&lt;![endif]--&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&#39;UTF-8&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&#39;X-UA-Compatible&#39;</span> <span class="na">content=</span><span class="s">&#39;IE=edge,chrome=1&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;title&gt;</span>Title Goes Here<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if IE 9]&gt;</span>
</span><span class='line'><span class="c">  &lt;style type=&quot;text/css&quot;&gt; .gradient { filter: none;} &lt;/style&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="c">&lt;!--[if lt IE 9]&gt;</span>
</span><span class='line'><span class="c">&lt;script src=&quot;http://html5shiv.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;![endif]--&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is based on the <a href="paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">HTML5 set up from Paul Irish</a>. We&#8217;ll use this as the basis for all of our pages. Now, to use this, we are going to create a <code>MY_Controller</code> inside of <code>appliction/core/MY_Controller.php</code>, and create a new function that we&#8217;ll call <code>render</code></p>

<figure class='code'><figcaption><span>application/core/MY_Controller.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MY_Controller</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$layout</span> <span class="o">=</span> <span class="s1">&#39;layout&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$view_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="nv">$content</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span><span class="p">,</span><span class="nv">$view_data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow us to use the layout file to wrap all of our content. We&#8217;ve also stored the layout file as a protected variable of the MY_Controller, so that we can use different layouts for different controllers if we so choose. Now, let&#8217;s modify the template file to be able to render the content. Change the body tag so that it looks like this:</p>

<figure class='code'><figcaption><span>application/views/layout.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="cp">&lt;?= $content; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s set up an example view and an example controller to see how it works.</p>

<figure class='code'><figcaption><span>application/views/example/index.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="nt">&lt;h1&gt;</span>Hello, World!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span> Example page using layouts <span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>application/controllers/example.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Example</span> <span class="k">extends</span> <span class="nx">MY_Controller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="s1">&#39;example/index&#39;</span><span class="p">,</span><span class="k">null</span><span class="p">,</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Step 2: Adding the Asset Helper</h3>

<p>To help us manage our CSS, JavaScript, and image files, we are going to add some tools for asset manage. First, let&#8217;s include this <a href="http://codeigniter.com/wiki/Asset_Helper">Asset Helper</a> In our project, and update our <code>autoload.php</code> file so that it is automatically included. Now we are going to set up the directory structure for this. Here is how to do it from the base of your CodeIgniter project (assuming you are using the standard naming conventions):</p>

<pre><code>mkdir assets
mkdir assets/css
touch assets/css/app.css
mkdir assets/js
touch assets/js/app.js
mkdir assets/images
</code></pre>

<p>Now, we are going to keep a list of all of the standard CSS and JavaScript files inside of our MY_Controller, and pass them along to the layout:</p>

<figure class='code'><figcaption><span>application/core/MY_Controller.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MY_Controller</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$layout</span> <span class="o">=</span> <span class="s1">&#39;layout&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$stylesheets</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;app.css&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$javascripts</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;app.js&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$view_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="nv">$content</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;stylesheets&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_stylesheets</span><span class="p">(),</span>
</span><span class='line'>      <span class="s1">&#39;javascripts&#39;</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_javascripts</span><span class="p">()</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">load</span><span class="o">-&gt;</span><span class="na">view</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span><span class="p">,</span><span class="nv">$view_data</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">get_stylesheets</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stylesheets</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">get_javascripts</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">javascripts</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we&#8217;ll update our template using the <code>css_asset()</code> and <code>js_asset()</code> functions from the helper we included earlier:</p>

<figure class='code'><figcaption><span>application/views/layout.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;!-- in the &lt;head&gt; .. --&gt;</span>
</span><span class='line'><span class="cp">&lt;?</span> <span class="k">foreach</span><span class="p">(</span><span class="nv">$stylesheets</span> <span class="k">as</span> <span class="nv">$stylesheet</span><span class="p">)</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nx">css_asset</span><span class="p">(</span><span class="nv">$stylesheet</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x">    </span>
</span><span class='line'><span class="cp">&lt;?</span> <span class="k">endforeach</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- right before &lt;body&gt; --&gt;</span>
</span><span class='line'><span class="cp">&lt;?</span> <span class="k">foreach</span><span class="p">(</span><span class="nv">$javascripts</span> <span class="k">as</span> <span class="nv">$javascript</span><span class="p">)</span><span class="o">:</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;?</span><span class="o">=</span> <span class="nx">js_asset</span><span class="p">(</span><span class="nv">$javascript</span><span class="p">);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;?</span> <span class="k">endforeach</span><span class="p">;</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If you view the source, you should see that your <code>app.css</code> and <code>app.js</code> files are now included.</p>

<h3>Step 3: Adding Local Assets</h3>

<p>One of the better ideas Rails 3.0 brought to the table was the idea of the &#8216;asset pipeline&#8217;, which includes being able to define JavaScript and CSS files that are specific to a particular controller. Now let&#8217;s set up our CodeIgniter project to be able to behave in a similar manner.</p>

<p>This was my motivation for writing the <code>get_stylesheets()</code> and <code>get_javascripts()</code> functions in the <code>MY_Controller</code> class earlier. since we are going to be changing how we get the arrays, we can now do so without touching the <code>render()</code> function since we have abstracted out the interface in which we get our files.</p>

<p>So let&#8217;s update those two functions, and add two more protected variables to our <code>MY_Controller</code> file:</p>

<figure class='code'><figcaption><span>application/core/MY_Controller.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="nb">defined</span><span class="p">(</span><span class="s1">&#39;BASEPATH&#39;</span><span class="p">))</span> <span class="k">exit</span><span class="p">(</span><span class="s1">&#39;No direct script access allowed&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MY_Controller</span> <span class="k">extends</span> <span class="nx">CI_Controller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$layout</span> <span class="o">=</span> <span class="s1">&#39;layout&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$stylesheets</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;app.css&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$javascripts</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;app.js&#39;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$local_stylesheets</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$local_javascripts</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//other parts of the class..</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">get_stylesheets</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stylesheets</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">local_stylesheets</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">protected</span> <span class="k">function</span> <span class="nf">get_javascripts</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">javascripts</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">local_javascripts</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we are able to add additional asset files to the <code>local_stylesheets</code> and <code>local_javascripts</code> variables in classes that extend <code>MY_Controller</code>, allowing us to keep our code seperated and more organized. With this and templates, we now have a good system in place to manage the visual aspects of our web application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminals for Absolute Beginners: Part 1]]></title>
    <link href="http://gsto.github.com/blog/2012/02/15/terminals-for-absolute-beginners/"/>
    <updated>2012-02-15T09:35:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/02/15/terminals-for-absolute-beginners</id>
    <content type="html"><![CDATA[<h3>Directories and Commands</h3>

<p><img class="left" src="http://gsto.github.com/images/articles/terminal.jpg" width="260"></p>

<p>You&#8217;ve woken up in a strange place. Maybe you&#8217;ve decided you want to be a power user with your mac. Maybe you&#8217;ve finally decided to check out this strangle &#8216;Linux&#8217; thing you&#8217;ve heard so much about.  Maybe its your first day in software engineering class and the teacher is telling you you are going to have to work on the school&#8217;s server to turn in all of your work. Either way, you find yourself eye-to-eye with a terminal (commonly called the <em>command line</em>) and you don&#8217;t know what to do.</p>

<!-- more -->


<h3>Where Are We?</h3>

<p>Let&#8217;s start by doing what anyone would do when dropped off in a new strange land. Let&#8217;s figure out where we are and take stock of our surroundings.  Type the following command:</p>

<pre><code>pwd
</code></pre>

<p>this will tell you the directory you are currently in. It may look something like this:</p>

<pre><code>/home/glenn/
</code></pre>

<p>Let&#8217;s make sure we are still who we think we are:</p>

<pre><code>whoami
</code></pre>

<p>This will tell you your username:</p>

<pre><code>glenn
</code></pre>

<p>Now, let&#8217;s see what else is in the directory with us:</p>

<pre><code>ls
</code></pre>

<p>this gives us a list of all the files and directories in the directory we are currently in. but maybe we want a bit more information about this. let&#8217;s type the following command:</p>

<pre><code>ls -la
</code></pre>

<p>and we get something like this:</p>

<pre><code>drwxr-xr-x 70 grp   glenn    4096 2012-02-15 09:35 .
drwxr-xr-x  3 root  root     4096 2011-03-15 16:55 ..
drwxr-xr-x  2 grp   glenn    4096 2012-02-07 09:21 Pictures
drwxr-xr-x  2 grp   glenn    4096 2011-08-23 15:29 Public
drwxr-xr-x  5 grp   glenn    4096 2011-09-28 13:30 Rails
drwxr-xr-x  6 grp   glenn    4096 2011-11-08 16:35 Repositories
drwxr-xr-x 12 grp   glenn    4096 2012-01-15 17:09 Server
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Templates
drwxrwxr-x  2 grp   glenn    4096 2011-08-11 08:46 Ubuntu One
drwxr-xr-x  2 grp   glenn    4096 2011-03-15 17:03 Videos
</code></pre>

<p>Whoa! there is a lot to take in here. Why did adding <code>-la</code> to the <code>ls</code> command change the output so much, And what is all of this stuff in front of the file names now? Why are there two files named <code>.</code> and <code>..</code>?</p>

<h3>Commands And Options</h3>

<p><code>ls</code> and <code>pwd</code> are both <em>commands</em>. <code>pwd</code> is short for <strong>P</strong>rint <strong>W</strong>orking <strong>D</strong>irectory and well, prints your current working directory. <code>ls</code> is shorthand for list and lists the contents of the current working directory. These are the first of many commands we&#8217;ll  be going over. You can pass options to commands to change how they work. These are almost always formatted in the form of a single hyphen and a single letter, or two hyphens and a complete word.  You can combine single letter options with one hyphen, which is what we did when we typed <code>ls -la</code>. You could also write <code>ls -l</code> and <code>ls -a</code> and both would be valid commands. the <code>-l</code> argument tells the <code>ls</code> command to list the files on a single line with additional details. The <code>-a</code> command tells <code>ls</code> to show all files, including hidden ones. All directories contain at least two hidden directories, one called <code>.</code> and one called <code>..</code>, but we&#8217;ll get to those in a moment.</p>

<p>Many commands have similar options, where the same arguments have similar effects with similar commands. There is one option that works with almost every command on the terminal, and its the most important one you&#8217;ll ever learn. Are you ready? Got a pen?</p>

<pre><code>--help
</code></pre>

<p>This will print out an explanation of the commands function, and a list of options it can take and what they do. Go try running the following commands and checkout the output:</p>

<pre><code>whoami --help
ls --help
</code></pre>

<p>You&#8217;ll see that <code>whoami</code> is a relatively simple command with very few arguments, where <code>ls</code> has a lot more options available. I could just replace a lot of text in this and upcoming articles with &#8220;just run <code>--help</code>&#8221;, but I&#8217;m not going to. Feel free to explore some of the other commands and options that are available to them, and see what you can do with them.</p>

<h3>Traversing Directories</h3>

<p>Now I bet you are still wondering about that <code>.</code> and <code>..</code> stuff. These are both directories, or rather things that point to directories, that can be found in every single directory inside of linux based system. <code>.</code> Always points to the current directory. <code>..</code> Always points to the parent directory. If your current working directory is <code>/home/glenn/</code>, then <code>..</code> would point to <code>/home/</code>. If you make it all the way to the bottom directory (<code>/</code>), then <code>..</code> will still be there, but will also point to <code>/</code>.</p>

<p>Now let&#8217;s learn how to change our working directory so that we can start traversing the folders around us. This brings us to our next command and last one of this article:</p>

<pre><code>cd
</code></pre>

<p><code>cd</code> is short for &#8216;Change Directory&#8217;. To use this, we&#8217;ll look at another thing we can do with commands: pass <strong>arguments</strong> to them.</p>

<h3>Passing Arguments</h3>

<p>Commands take arguments when they need additional information on what they do. You could think of it as a &#8216;target&#8217; for the command. Commands can take multiple arguments, but in this case we&#8217;ll only need one: Telling cd what directory we would like to change our directory too. So, if we want to go into the <code>Pictures</code> directory earlier. try running these two commands:</p>

<pre><code>cd Pictures
pwd
</code></pre>

<p>Now, based on the folder structure we looked at earlier, we should get an output similar to this:</p>

<pre><code>/home/glenn/Pictures
</code></pre>

<p>If we wanted to go back to where we were, we can reference that <code>..</code> directory:</p>

<pre><code>cd ..
pwd
</code></pre>

<p>and we are back at</p>

<pre><code>/home/glenn
</code></pre>

<h3>cd ProTips</h3>

<p>You can chain together directories to move multiple steps at once, like so:</p>

<pre><code>cd Pictures/Vacations/Vegas
cd ../../../
</code></pre>

<p>There are also two handy shortcuts available to the <code>cd</code> command:</p>

<pre><code>cd -
cd ~
</code></pre>

<p>the first is sort of an &#8216;undo&#8217; option. if will take you back to your last working directory. the tilde (<code>~</code>) is short hand for your <em>home directory</em> which every user has.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress]]></title>
    <link href="http://gsto.github.com/blog/2012/02/11/blogging-with-octopress/"/>
    <updated>2012-02-11T10:00:00-05:00</updated>
    <id>http://gsto.github.com/blog/2012/02/11/blogging-with-octopress</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://gsto.github.com/images/articles/blog_with_octopress.png" width="260">
If you&#8217;re reading this, then I&#8217;ve successfully got my octopress blog up and running on Github pages. Why the switch to octopress?</p>

<!-- more -->


<h2>Writing with Octopress</h2>

<p>I love being able to write in emacs using markdown. It feels simple. It feels easy. It feels right.</p>

<h2>Deploying with Github</h2>

<p>This also allows me to host with github pages for free, and use git for deployment. So many headaches just went away for me when it comes to writing.</p>

<h2>Version Control based writing.</h2>

<p>I can take the same approach to writing as I can with coding, publishing fast, fixing mistakes as they are found, and changing content as need be. What you are currently reading isn&#8217;t the first version of the post, and likely not the last.
I also like the idea of &#8216;open source&#8217; writing. If anyone has anything they would like to add or change, feel free to send a pull request to this repo, and I&#8217;ll take it under consideration.</p>

<h2>The Right Plugins</h2>

<p>There aren&#8217;t many plugins or themes available for octopress (yet), but it has all the things that are needed to get good content going. That&#8217;s what I love about it, it is all content based. The default theme is a beautiful starting off point, it&#8217;s clear and responsive.</p>
]]></content>
  </entry>
  
</feed>
